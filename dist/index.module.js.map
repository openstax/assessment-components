{"version":3,"file":"index.module.js","sources":["../src/utils.ts","../src/components/Content.tsx","../src/components/Feedback.tsx","../src/components/Answer.tsx","../src/constants.ts","../src/components/StepCardFooter.tsx","../src/components/AnswersTable.tsx","../src/theme.ts","../src/components/Question.tsx","../src/components/Button.tsx","../src/components/FreeResponseInput.tsx","../src/components/Card.tsx","../src/components/ExerciseQuestion.tsx","../src/components/Exercise.tsx","../src/components/ProgressBar.tsx"],"sourcesContent":["import { Answer, ChosenAnswer, ID } from '../src/types';\n\nexport const ALPHABET = 'abcdefghijklmnopqrstuvwxyz';\n\nconst MAX_CORRECTNESS = '1.0';\n\nexport const isAnswerCorrect = function(answer: Answer, correctAnswerId?: ID | null) {\n  // if answer does not have an id, check the isCorrect property.\n  if (!(answer.id || correctAnswerId)) {\n    return answer.isCorrect;\n  }\n  let isCorrect = answer.id === correctAnswerId;\n  if (answer.correctness != null) { isCorrect = (answer.correctness === MAX_CORRECTNESS); }\n\n  return isCorrect;\n};\n\nexport const isAnswerIncorrect = function(answer: Answer, incorrectAnswerId?: ID) {\n  // Allow multiple attempts to show incorrectness without the correct_answer_id\n  return answer.id === incorrectAnswerId;\n};\n\nexport const isAnswerChecked = (answer: Answer, chosenAnswer?: ChosenAnswer) =>\n  Boolean((chosenAnswer || []).find( a => a == answer.id));\n\nexport function countWords(text: string) {\n  const trimmedText = text.trim();\n  //https://css-tricks.com/build-word-counter-app/\n  const words = trimmedText.match(/\\b[-?(\\w+)?]+\\b/gi);\n  if(!words) return 0;\n  return words.length;\n}\n","import React from \"react\";\n\n/* eslint-disable-next-line @typescript-eslint/no-explicit-any */\ntype ComponentType = keyof JSX.IntrinsicElements | React.JSXElementConstructor<any>;\n\nexport interface ContentProps<T extends ComponentType | undefined> {\n  className?: string;\n  component?: T extends undefined ? undefined :\n    T extends ComponentType ? React.ReactComponentElement<T>:\n    never;\n  html: string;\n  block?: boolean;\n}\n\nexport const Content = (<T extends ComponentType | undefined>(\n  {html, component, block = false, ...props}: ContentProps<T>\n) => {\n  if (component !== undefined) {\n    return React.cloneElement(component, {html, ...props});\n  }\n  if (block) {\n    return <div dangerouslySetInnerHTML={{ __html: html }} {...props} />;\n  } else {\n    return <span dangerouslySetInnerHTML={{ __html: html }} {...props} />;\n  }\n});\n","import classnames from 'classnames';\nimport { Content } from './Content';\n\ninterface FeedbackProps {\n  position?: 'top' | 'bottom' | 'left' | 'right';\n  children: string;\n  className?: string;\n  contentRenderer?: JSX.Element;\n}\n\nconst SimpleFeedback = (props: Pick<FeedbackProps, 'children' | 'className' | 'contentRenderer'>) => (\n  <aside>\n    <Content\n      component={props.contentRenderer}\n      className={classnames('question-feedback-content', 'has-html', props.className)}\n      html={props.children}\n      block={true} />\n  </aside>\n);\n\nconst Feedback = (props: FeedbackProps) => {\n  const position = props.position || 'bottom';\n  const wrapperClasses = classnames('question-feedback', position);\n\n  return (\n    <aside className={wrapperClasses}>\n      <div className=\"arrow\" aria-label=\"Answer Feedback\" />\n      <SimpleFeedback {...props}>\n        {props.children}\n      </SimpleFeedback>\n    </aside>\n  );\n};\n\nexport { Feedback, SimpleFeedback };\n","import cn from 'classnames';\nimport { ReactNode } from 'react';\nimport { ALPHABET, isAnswerChecked, isAnswerCorrect, isAnswerIncorrect } from '../utils';\nimport { Answer as AnswerType, ChosenAnswer, ID } from '../types';\nimport { Content } from './Content';\nimport { SimpleFeedback } from './Feedback';\n\nexport interface AnswerProps {\n  answer: AnswerType;\n  iter: number;\n  qid: ID;\n  type: 'teacher-review' | 'teacher-preview' | 'student' | 'student-mpp';\n  hasCorrectAnswer?: boolean;\n  onChangeAnswer?: (answer: AnswerType) => void;\n  disabled: boolean;\n  chosenAnswer: ChosenAnswer;\n  correctAnswerId?: ID | null;\n  incorrectAnswerId?: ID;\n  onKeyPress?: () => void;\n  answered_count?: number;\n  correctIncorrectIcon?: ReactNode,\n  radioBox?: ReactNode;\n  contentRenderer?: JSX.Element;\n  show_all_feedback?: boolean;\n}\n\nexport const Answer = (props: AnswerProps) => {\n  const {\n    type,\n    iter,\n    answer,\n    disabled,\n    onKeyPress,\n    qid,\n    chosenAnswer,\n    correctAnswerId,\n    incorrectAnswerId,\n    hasCorrectAnswer,\n    answered_count,\n    contentRenderer,\n    show_all_feedback\n  } = props;\n\n  let body, feedback, selectedCount;\n\n  const isChecked = isAnswerChecked(answer, chosenAnswer);\n  const isCorrect = isAnswerCorrect(answer, correctAnswerId);\n  const isIncorrect = isAnswerIncorrect(answer, incorrectAnswerId);\n\n  const correctIncorrectIcon = (\n    <div className=\"correct-incorrect\">\n      {isCorrect && props.correctIncorrectIcon}\n    </div>\n  );\n\n  const classes = cn('answers-answer', {\n    'disabled': disabled,\n    'answer-checked': isChecked,\n    'answer-correct': isCorrect && type !== 'student-mpp',\n    'answer-incorrect': incorrectAnswerId && isAnswerIncorrect(answer, incorrectAnswerId),\n  });\n\n  let ariaLabel = `${isChecked ? 'Selected ' : ''}Choice ${ALPHABET[iter]}`;\n  // somewhat misleading - this means that there is a correct answer,\n  // not necessarily that this answer is correct\n  if (hasCorrectAnswer) {\n    ariaLabel += `(${isCorrect ? 'Correct' : 'Incorrect'} Answer)`;\n  }\n  ariaLabel += ':';\n\n  let onChangeAnswer: AnswerProps['onChangeAnswer'], radioBox;\n\n  const onChange = () => onChangeAnswer && onChangeAnswer(answer);\n\n  if (!hasCorrectAnswer\n    && (type !== 'teacher-review')\n    && (type !== 'teacher-preview')\n    && (type !== 'student-mpp')) {\n    ({ onChangeAnswer } = props);\n  }\n\n  if (onChangeAnswer) {\n    radioBox = (\n      <input\n        type=\"radio\"\n        className=\"answer-input-box\"\n        checked={isChecked}\n        id={`${qid}-option-${iter}`}\n        name={`${qid}-options`}\n        onChange={onChange}\n        disabled={disabled}\n      />\n    );\n  }\n\n  if (show_all_feedback && answer.feedback_html) {\n    feedback = (\n      <SimpleFeedback key=\"question-mc-feedback\" contentRenderer={contentRenderer}>\n        {answer.feedback_html}\n      </SimpleFeedback>\n    );\n  }\n\n  if (type === 'teacher-review') {\n    let percent = 0;\n    if (answer.selected_count && answered_count) {\n      percent = Math.round((answer.selected_count / answered_count) * 100);\n    }\n    selectedCount = (\n      <span\n        className=\"selected-count\"\n        data-percent={`${percent}`}\n      >\n        {answer.selected_count}\n      </span>\n    );\n\n    body = (\n      <div className=\"review-wrapper\">\n        <div className={cn('review-count', { 'green': isCorrect, 'red': !isCorrect })}>\n          {selectedCount}\n          <span className={cn('letter', { 'green': isCorrect, 'red': !isCorrect })}>\n            {ALPHABET[iter]}\n          </span>\n        </div>\n\n        <div className=\"answer-answer\">\n          <Content className=\"answer-content\" component={contentRenderer} html={answer.content_html} />\n          {feedback}\n        </div>\n      </div>\n    );\n  } else {\n    body = (\n      <>\n        {type === 'teacher-preview' && correctIncorrectIcon}\n        {selectedCount}\n        {radioBox}\n        <label\n          onKeyPress={onKeyPress}\n          htmlFor={`${qid}-option-${iter}`}\n          className=\"answer-label\">\n          <span className=\"answer-letter-wrapper\">\n            <button\n              onClick={onChange}\n              aria-label={ariaLabel}\n              className=\"answer-letter\"\n              disabled={disabled || isIncorrect}\n              data-test-id={`answer-choice-${ALPHABET[iter]}`}\n            >\n              {ALPHABET[iter]}\n            </button>\n          </span>\n          <div className=\"answer-answer\">\n            <Content className=\"answer-content\" component={contentRenderer} html={answer.content_html} />\n            {feedback}\n          </div>\n        </label>\n      </>\n    );\n  }\n\n  return (\n    <div className=\"openstax-answer\">\n      <section role=\"region\" className={classes}>\n        {body}\n      </section>\n    </div>\n  );\n}\nAnswer.displayName = 'OSAnswer';\n","import { AnswerDisplayType } from './types';\n\nexport const defaultAnswerType: AnswerDisplayType = 'student';\n","import { colors, breakpoints, mixins } from \"../theme\";\nimport styled from \"styled-components\";\n\nexport const StepCardFooter = styled.div`\n    ${mixins.stepCardPadding()}\n    border-top: 1px solid ${colors.palette.pale};\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: space-between;\n    font-size: 1.4rem;\n    line-height: 2rem;\n\n    > * {\n        flex-grow: 1;\n    }\n\n    button {\n        width: 160px;\n        height: 48px;\n    }\n\n    .points {\n        margin-bottom: 1.6rem; // Replace with https://caniuse.com/?search=gap soon\n\n        .attempts-left {\n            color: #F36B32;\n        }\n    }\n\n    .controls {\n        display: flex;\n        flex-flow: column wrap-reverse;\n        margin-left: 1.6rem; // Replace with https://caniuse.com/?search=gap soon\n\n        button + button {\n            margin: 0.8rem 0 0 0;\n        }\n    }\n\n    ${breakpoints.desktop`\n        padding: 32px 140px;\n        flex-wrap: nowrap;\n\n        .points {\n            max-width: 400px;\n        }\n\n        .controls {\n            flex-flow: row;\n            justify-content: flex-end;\n\n            button + button {\n                margin: 0 0 0 0.8rem;\n            }\n        }\n    `}\n`;\n","import { defaultAnswerType } from \"../constants\";\nimport { Answer as AnswerType, AnswerDisplayType, ID, ExerciseQuestionData } from \"src/types\";\nimport { Answer } from \"./Answer\";\nimport { Feedback } from \"./Feedback\";\n\nexport interface AnswersTableProps {\n  question: ExerciseQuestionData;\n  type?: AnswerDisplayType;\n  answer_id?: ID;\n  correct_answer_id?: ID | null;\n  incorrectAnswerId?: ID;\n  answerIdOrder?: ID[],\n  feedback_html: string;\n  correct_answer_feedback_html?: string;\n  answered_count?: number;\n  show_all_feedback?: boolean;\n  onChangeAnswer: () => void;\n  hideAnswers: boolean;\n  hasCorrectAnswer?: boolean;\n  onChangeAttempt?: () => void;\n  choicesEnabled?: boolean;\n  onKeyPress?: () => void;\n  contentRenderer?: JSX.Element;\n  instructions?: JSX.Element;\n}\n\nexport const AnswersTable = (props: AnswersTableProps) => {\n  let idCounter = 0;\n\n  const {\n    question, hideAnswers, type = defaultAnswerType, answered_count, choicesEnabled, correct_answer_id,\n    incorrectAnswerId, answer_id, feedback_html, correct_answer_feedback_html,\n    show_all_feedback = false, hasCorrectAnswer, onChangeAnswer, onKeyPress, answerIdOrder, instructions\n  } = props;\n  if (hideAnswers) { return null; }\n\n  const { id } = question;\n\n  const feedback: { index: number, html: string }[] = [];\n\n  const chosenAnswer = [answer_id];\n\n  const sortedAnswersByIdOrder = (idOrder: ID[]) => {\n    const { answers } = question;\n    return answers.slice().sort((a, b) => idOrder.indexOf(a.id) - idOrder.indexOf(b.id));\n  }\n\n  const questionAnswerProps = {\n    qid: id || `auto-${idCounter++}`,\n    correctAnswerId: correct_answer_id,\n    incorrectAnswerId,\n    hasCorrectAnswer,\n    chosenAnswer,\n    onChangeAnswer: onChangeAnswer,\n    type,\n    answered_count,\n    disabled: !choicesEnabled,\n    show_all_feedback,\n    onKeyPress\n  };\n\n  const answers = answerIdOrder ? sortedAnswersByIdOrder(answerIdOrder) : question.answers;\n\n  const answersHtml = answers.map((answer, i) => {\n    const additionalProps: { answer: AnswerType, iter: number, key: string }\n      = { answer: {...answer, question_id: parseInt(question.id.toString(), 10) },\n          iter: i,\n          key: `${questionAnswerProps.qid}-option-${i}`\n        };\n    const answerProps = Object.assign({}, additionalProps, questionAnswerProps);\n\n    if (answer.id === incorrectAnswerId && feedback_html) {\n      feedback.push({ index: i, html: feedback_html })\n    } else if (answer.id === correct_answer_id && correct_answer_feedback_html) {\n      feedback.push({ index: i, html: correct_answer_feedback_html })\n    }\n\n    return (\n      <Answer {...answerProps} />\n    );\n  });\n\n  feedback.forEach((item, i) => {\n    const spliceIndex = item.index + i + 1;\n    answersHtml.splice(spliceIndex, 0, (\n      <Feedback key={spliceIndex} contentRenderer={props.contentRenderer}>\n        {item.html}\n      </Feedback>\n    ));\n  });\n\n  return (\n    <div className=\"answers-table\">\n      {instructions}\n      {answersHtml}\n    </div>\n  );\n}\n","import { css } from 'styled-components';\n\nconst palette = {\n  red: \"#ca2026\",\n  danger: \"#c2002f\",\n  darkRed: \"#c22032\",\n  lightRed: \"#e298a0\",\n  green: \"#77af42\",\n  lightGreen: \"#8bc753\",\n  darkGreen: \"#63a524\",\n  paleYellow: \"#ffffbb\",\n  teal: \"#0dc0de\",\n  blue: \"#007da4\",\n  lightBlue: \"#34bdd8\",\n  neutralLightBlue: \"#0dc0dc\",\n  tangerine: \"#ffbd3e\",\n  gray: \"#5e5e5e\",\n  darkGray: \"#757575\",\n  pale: \"#d5d5d5\",\n  light: \"#e4e4e4\",\n  white: \"#ffffff\",\n  neutralLightest: \"#f9f9f9\", // nearly white\n  neutralCool: \"#f6f7f8\", // cool bright gray\n  neutralBright: \"#f5f5f5\", // bright gray\n  neutralLighter: \"#f1f1f1\", // light gray\n  neutralLight: \"#e5e5e5\", // light gray\n  neutralMedium: \"#a0a0a0\", // light gray\n  neutral: \"#818181\", // gray\n  neutralThin: \"#6f6f6f\", // medium gray\n  neutralDark: \"#5f6163\", // dark gray\n  neutralFeedback: \"#555\", // another dark gray\n  neutralDarker: \"#424242\", // very dark gray\n  black: \"#000000\",\n  orange: \"#D4450C\"\n};\n\nexport const colors = {\n  palette: palette,\n  answer: {\n    color: palette.lightBlue,\n    correct: {\n      color: palette.green,\n      background: \"#77af42\",\n    },\n    incorrect: {\n      color: palette.red,\n      background: palette.red,\n    },\n    checked: palette.lightBlue,\n    hover: palette.neutralDark,\n    label: {\n      color: palette.neutralMedium,\n      colorHover: palette.neutralDark,\n      colorSelected: palette.lightBlue,\n    },\n    feedback: {\n      arrowOuterColor: \"rgba(0, 0, 0, 0.25)\",\n      popover: {\n        borderColor: \"rgba(0, 0, 0, 0.2)\",\n      },\n    },\n  },\n  card: {\n    background: \"#daf3f8\",\n  },\n  button: {\n    background: palette.orange,\n    backgroundHover: \"#E74B0D\",\n    backgroundActive: \"#C5400B\"\n  },\n  freeResponse: {\n    color: palette.neutralDark,\n    background: palette.neutralLighter,\n  },\n};\n\nexport const layouts = {\n  answer: {\n    verticalSpacing: \"1.5rem\",\n    horizontalSpacing: \"1rem\",\n    horizontalBuffer: \"2.5rem\",\n    bubbleSize: \"4rem\",\n    labelSpacing: \"6.5rem\",\n    feedback: {\n      arrow: {\n        width: \"20px\",\n        height: \"15px\",\n      },\n      popover: {\n        horizontalSpacing: \"2rem\",\n        verticalSpacing: \"2rem\",\n        horizontalBuffer: \"4rem\",\n        borderWidth: \"1px\",\n        maxWidth: \"370px\",\n      }\n    },\n  },\n};\n\nexport const BREAKPOINTS = {\n  mobile: 600,\n  tablet: 999,\n  desktop: 1000,\n  large: 1600,\n};\n\nexport const breakpoints = {\n  mobile(...args: Parameters<typeof css>) {\n    return css`@media(max-width: ${BREAKPOINTS.mobile}px) { ${css(...args)} }`;\n  },\n  tablet(...args: Parameters<typeof css>) {\n    return css`@media(max-width: ${BREAKPOINTS.tablet}px) { ${css(...args)} }`;\n  },\n  desktop(...args: Parameters<typeof css>) {\n    return css`@media(min-width: ${BREAKPOINTS.desktop}px) { ${css(...args)} }`;\n  },\n  only: {\n    mobile(...args: Parameters<typeof css>) {\n      return css`@media(max-width: ${BREAKPOINTS.mobile}px) { ${css(...args)} }`;\n    },\n  },\n  margins: {\n    mobile: '8px',\n    tablet: '24px',\n  },\n};\n\nexport const transitions = {\n  answer: \"0.1s ease-in-out\",\n}\n\nexport const mixins = {\n  answer: () => css`\n    .answer-label {\n      display: flex;\n    }\n    color: ${colors.answer.label.color};\n    .answer-letter {\n      width: ${layouts.answer.bubbleSize};\n      height: ${layouts.answer.bubbleSize};\n      min-width: ${layouts.answer.bubbleSize};\n      min-height: ${layouts.answer.bubbleSize};\n      border-radius: calc(${layouts.answer.bubbleSize} / 2);\n      border-width: 2px;\n      border-style: solid;\n      border-color: #c6c6c6;\n      color: ${colors.answer.label.colorHover};\n      transition: color ${transitions.answer}, border-color ${transitions.answer}, background-color ${transitions.answer};\n      background-color: ${colors.palette.white};\n    }\n  `,\n  answerColor: (values: { color: string, background: string }) => css`\n    color: ${values.color};\n    .answer-letter {\n       border-color: ${values.color};\n       background-color: ${values.background};\n       color: ${colors.palette.white};\n    }\n  `,\n  answerChecked: () => mixins.answerColor({ color: colors.answer.checked, background: colors.answer.checked }),\n  answerCorrect: () => mixins.answerColor(colors.answer.correct),\n  answerIncorrect: () => mixins.answerColor(colors.answer.incorrect),\n  answerHover: () => css`\n    color: ${colors.answer.label.colorHover};\n    .answer-letter {\n      border-color: ${colors.answer.label.colorSelected};\n    }\n  `,\n  answerCorrectText: () => css`\n    content: 'correct answer';\n    color: ${colors.answer.label.color};\n    margin-left: calc(-1.25 * ${layouts.answer.bubbleSize});\n    width: calc(1.25 * ${layouts.answer.bubbleSize});\n    text-align: center;\n    font-size: 1.2rem;\n    // em used here for line-height for compatibility with IE\n    // http://caniuse.com/#feat=rem -- rem ignored in pseudo elements\n    line-height: 1em;\n    margin-top: 0.8rem;\n  `,\n  answerCorrectAnswer: () => css`\n    color: ${colors.answer.correct.color};\n    .answer-letter {\n      border-color: ${colors.answer.correct.color};\n      color: ${colors.answer.correct.color};\n    }\n    &::before {\n     ${mixins.answerCorrectText()}\n      @media screen and (max-width: ${BREAKPOINTS.tablet}px) {\n        display: none;\n      }\n    }\n    @media screen and (max-width:  ${BREAKPOINTS.tablet}px) {\n      .answer-letter-wrapper {\n        display: flex;\n        flex-direction: column;\n        &::after {\n          ${mixins.answerCorrectText()}\n          width: $openstax-answer-bubble-size !important;\n          margin-left: 0;\n        }\n      }\n    }\n  `,\n  resetText: () => css`\n    font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", \"Liberation Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";\n    font-style: normal;\n    font-weight: 400;\n    line-height: 1.6;\n    text-align: left;\n    text-align: start;\n    text-decoration: none;\n    text-shadow: none;\n    text-transform: none;\n    letter-spacing: normal;\n    word-break: normal;\n    word-spacing: normal;\n    white-space: normal;\n    line-break: auto;\n  `,\n  stepCardPadding: () => css`\n    padding: 48px 140px;\n\n    ${breakpoints.tablet`\n      padding: ${breakpoints.margins.tablet} ${breakpoints.margins.tablet};\n    `}\n\n    ${breakpoints.mobile`\n      padding: calc(${breakpoints.margins.mobile} * 2) ${breakpoints.margins.mobile};\n    `}\n  `,\n};\n\nconst theme = {\n  colors: colors,\n  layouts: layouts,\n  transitions: transitions,\n  breakpoints: breakpoints,\n};\n\nexport default theme;\n","import styled from 'styled-components';\nimport { mixins, colors, layouts, transitions } from '../theme';\nimport { AnswersTable } from './AnswersTable';\nimport classnames from 'classnames';\nimport { ID, ExerciseQuestionData, Task } from 'src/types';\nimport { ReactNode } from 'react';\nimport { Content } from './Content';\n\nconst StyledQuestion = styled.div`\n&.step-card-body {\n  ${mixins.stepCardPadding()};\n}\n\n&.openstax-question {\n  font-size: 2rem;\n\n  .detailed-solution {\n    margin-bottom: 1rem;\n    .header {\n      display: inline;\n      margin-right: 0.5rem;\n      color: #5e6062;\n      font-weight: bold;\n      flex-basis: 0;\n    }\n    .solution {\n      display: inline;\n      color: #6f6f6f;\n    }\n  }\n\n  img {\n    display: block;\n    margin: auto;\n    max-width: 100%;\n  }\n\n  .question-stem {\n    margin-bottom: 0;\n  }\n\n  .answers-table {\n    margin-bottom: 20px;\n    font-size: 17px;\n    line-height: 25px;\n  }\n\n  .instructions {\n    font-size: 1.4rem;\n    font-style: italic;\n    margin-top: 10px;\n    color: ${colors.palette.neutral};\n    margin: 0;\n\n    i {\n      margin-left: 5px;\n    }\n\n    .text-info {\n      color: ${colors.palette.neutralLightBlue};\n      padding-left: 5px;\n      cursor: pointer;\n      font-style: normal;\n    }\n  }\n\n  .multiple-choice-prompt {\n    font-weight: 600;\n  }\n\n  .free-response {\n    padding: ${layouts.answer.horizontalSpacing} ${layouts.answer.horizontalBuffer};\n    margin: ${layouts.answer.verticalSpacing} 0 ${layouts.answer.horizontalSpacing} ${layouts.answer.verticalSpacing};\n    border-left: ${layouts.answer.horizontalSpacing} solid ${colors.palette.neutralLighter};\n    font-style: italic;\n  }\n\n  &:not(.openstax-question-preview) {\n    .answers-answer {\n      width: initial;\n      &:not(.disabled){\n        .answer-label:focus{\n          background-color: ${colors.palette.neutralLightest};\n        }\n      }\n      ${mixins.answer()};\n    }\n\n    .answer-answer {\n      flex: 1;\n      display: flex;\n      align-items: center;\n      margin-left: ${layouts.answer.horizontalSpacing};\n      * {\n        margin: 0;\n      }\n    }\n\n    .answer-letter {\n      text-align: center;\n      padding: 0;\n    }\n\n\n    .answer-label {\n      font-weight: normal;\n      width: 100%;\n      padding: ${layouts.answer.verticalSpacing} 0 0 0;\n      margin: 0;\n\n      transition: color ${transitions.answer};\n    }\n\n    // a selectable answer\n    .answer-input-box:not([disabled]) ~ .answer-label {\n      cursor: pointer;\n\n      &:hover {\n        ${mixins.answerHover()}\n      }\n    }\n\n    // a selected answer\n    &:not(.has-correct-answer) {\n      .answer-input-box {\n        display: none;\n\n        &:checked {\n          + .answer-label,\n          + .answer-label:hover {\n            ${mixins.answerChecked()};\n          }\n        }\n      }\n\n      .answer-checked{\n        .answer-label {\n          ${mixins.answerChecked()};\n        }\n      }\n    }\n\n    // answer that has been checked\n    &.has-correct-answer {\n      .answer-checked {\n        &:not(.answer-correct) {\n          .answer-label {\n            ${mixins.answerIncorrect()};\n          }\n        }\n\n        &.answer-correct {\n          .answer-label {\n            ${mixins.answerCorrect()};\n          }\n        }\n      }\n\n      .answer-correct:not(.answer-checked) {\n        .answer-label {\n          ${mixins.answerCorrectAnswer()}\n        }\n      }\n    }\n\n    &.has-incorrect-answer {\n      .answer-incorrect, .answer-checked.answer-incorrect {\n        .answer-label {\n          ${mixins.answerIncorrect()}\n        }\n      }\n    }\n\n    .question-feedback {\n      ${mixins.resetText()}\n\n      z-index: 1;\n      position: relative;\n      border: ${layouts.answer.feedback.popover.borderWidth} solid ${colors.answer.feedback.popover.borderColor};\n      background-color: ${colors.palette.white};\n      background-clip: padding-box;\n      border-radius: 0.3rem;\n      max-width: ${layouts.answer.feedback.popover.maxWidth};\n      margin: calc(${layouts.answer.feedback.arrow.height} - 5px) 0 ${layouts.answer.horizontalSpacing} calc(-1 * (2 * ${layouts.answer.horizontalSpacing}));\n      box-shadow: 10px 0px 10px rgba(0, 0, 0, .25);\n      color: ${colors.palette.neutral};\n      font-size: 1.4rem;\n      font-style: italic;\n\n      .arrow {\n        position: absolute;\n        display: block;\n        width: ${layouts.answer.feedback.arrow.width};\n        height: ${layouts.answer.feedback.arrow.height};\n        margin-left: 30px;\n        top: calc((${layouts.answer.feedback.arrow.height} + ${layouts.answer.feedback.popover.borderWidth}) * -1);\n\n        &::before,\n        &::after {\n          position: absolute;\n          display: block;\n          content: \"\";\n          border-color: transparent;\n          border-style: solid;\n          border-width: 0 calc(${layouts.answer.feedback.arrow.width} / 2) ${layouts.answer.feedback.arrow.height} calc(${layouts.answer.feedback.arrow.width} / 2);\n        }\n        &::before {\n          top: 0;\n          border-bottom-color: ${colors.answer.feedback.popover.borderColor};\n        }\n        &::after {\n          top: ${layouts.answer.feedback.popover.borderWidth};\n          border-bottom-color: ${colors.palette.white};\n        }\n      }\n\n      .question-feedback-content {\n        padding: ${layouts.answer.feedback.popover.verticalSpacing} ${layouts.answer.feedback.popover.horizontalSpacing};\n      }\n    }\n  }\n\n  .openstax-answer {\n    border-top: 1px solid #d5d5d5;\n    margin: 10px 0;\n    padding: 10px 0;\n  }\n}\n`;\n\nexport interface QuestionProps {\n  question: ExerciseQuestionData,\n  answer_id?: ID;\n  task?: Task | null,\n  correct_answer_id: ID | null;\n  incorrectAnswerId: ID;\n  hideAnswers: boolean;\n  hidePreambles?: boolean,\n  exercise_uid?: string;\n  displayFormats: boolean,\n  className: string;\n  questionNumber: number;\n  displaySolution: boolean;\n  context?: string;\n  correct_answer_feedback_html?: string;\n  contentRenderer?: JSX.Element;\n  feedback_html: string;\n  onChange: () => void;\n  show_all_feedback?: boolean;\n  children?: ReactNode;\n  answerIdOrder?: ID[];\n  choicesEnabled?: boolean;\n}\n\nexport const Question = (props: QuestionProps) => {\n  let exerciseUid, solution;\n\n  const {\n    question, correct_answer_id, incorrectAnswerId, exercise_uid, className, questionNumber, context, task, hidePreambles\n  } = props;\n\n  const { stem_html, collaborator_solutions = [], formats, stimulus_html } = question;\n\n  const hasCorrectAnswer = !!correct_answer_id;\n  const hasIncorrectAnswer = !!incorrectAnswerId;\n\n  const taskIsDeleted = (task != null ? task.is_deleted : undefined)\n  const taskIsHomework = ((task != null ? task.type : undefined) === 'homework');\n\n  const classes = classnames('openstax-question', className, {\n    'has-correct-answer': hasCorrectAnswer && !(taskIsDeleted && taskIsHomework),\n    'has-incorrect-answer': hasIncorrectAnswer,\n  });\n\n  const hasSolution = () => {\n    const { displaySolution } = props;\n    const { collaborator_solutions = [] } = question;\n\n    return (\n      displaySolution &&\n      collaborator_solutions &&\n      collaborator_solutions.find(s => s['content_html'] !== undefined)\n    );\n  };\n\n  if (exercise_uid != null) {\n    exerciseUid = (\n      <div className=\"exercise-uid\">\n        {exercise_uid}\n      </div>\n    );\n  }\n\n  if (hasSolution()) {\n    solution =\n      <div className=\"detailed-solution\">\n        <div className=\"header\">\n          Detailed solution:\n        </div>\n        <Content\n          className=\"solution\"\n          block={true}\n          html={collaborator_solutions.map(s => s['content_html']).join('')} />\n      </div>;\n  }\n\n  return (\n    <StyledQuestion className={classes} data-question-number={questionNumber} data-test-id=\"question\">\n      <QuestionHtml type=\"context\" html={context} hidden={hidePreambles} />\n      <QuestionHtml type=\"stimulus\" html={stimulus_html} hidden={hidePreambles} />\n      <QuestionHtml type=\"stem\" html={stem_html} hidden={hidePreambles} questionNumber={questionNumber} />\n      {props.children}\n\n      <AnswersTable\n        {...props}\n        onChangeAnswer={props.onChange}\n        hasCorrectAnswer={hasCorrectAnswer} />\n\n      {solution}\n      {props.displayFormats ? <FormatsListing formats={formats} /> : undefined}\n      {exerciseUid}\n    </StyledQuestion>\n  );\n}\n\ninterface QuestionHtmlProps {\n  html?: string;\n  type: string;\n  hidden: QuestionProps['hidePreambles'];\n  questionNumber?: QuestionProps['questionNumber'];\n}\n\nexport const QuestionHtml = (props: QuestionHtmlProps) => {\n  const { html = '', type, hidden, questionNumber } = props;\n  if (hidden === true || !(html.length > 0)) { return null; }\n\n  return (\n    <Content\n      html={html}\n      data-question-number={questionNumber}\n      className={`question-${type}`}\n      block={true}\n    />\n  );\n};\n\nconst FormatsListing = ({ formats = [] }: { formats: ExerciseQuestionData['formats'] }) => {\n  return (\n    <div className=\"formats-listing\">\n      <div className=\"header\">Formats:</div>\n      {formats.map((format, i) => <span key={i}>{format}</span>)}\n    </div>\n  );\n};\n","import { colors } from \"../theme\";\nimport styled from \"styled-components\";\n\nconst StyledButton = styled.button`\n  background-color: ${colors.button.background};\n  color: ${colors.palette.white};\n  font-size: 1.6rem;\n  font-weight: 700;\n  line-height: 2rem;\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n  height: 4rem;\n  padding: 0 3rem;\n  border: 0;\n  border-radius: 5px;\n  box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.2);\n\n  &:not([disabled]) {\n    cursor: pointer;\n    &:hover {\n      background: ${colors.button.backgroundHover}\n    }\n    &:active {\n      background: ${colors.button.backgroundActive}\n    }\n  }\n  &:disabled {\n    opacity: 0.4;\n  }\n`;\n\ninterface ButtonProps extends React.ComponentPropsWithoutRef<'button'> {\n  isWaiting?: never;\n  waitingText?: never;\n}\ninterface WaitingButtonProps extends React.ComponentPropsWithoutRef<'button'> {\n  isWaiting: boolean;\n  waitingText: string;\n}\n\nconst Button = (props: ButtonProps | WaitingButtonProps) => {\n  const { disabled, isWaiting, waitingText, children, ...otherProps } = props;\n\n  return (\n    <StyledButton {...otherProps} disabled={isWaiting || disabled}>{(isWaiting && waitingText) || children}</StyledButton>\n  );\n}\n\nexport default Button;\n","import { MouseEventHandler, ReactNode } from 'react';\nimport { countWords } from '../utils';\nimport styled, { css } from 'styled-components';\nimport { colors, mixins } from '../theme';\nimport { AvailablePoints, ExerciseQuestionData } from 'src/types';\nimport { QuestionHtml } from './Question';\nimport Button from './Button';\nimport { StepCardFooter } from './StepCardFooter';\n\nexport interface FreeResponseProps {\n  readOnly: boolean;\n  wordLimit: number;\n  infoRowChildren?: ReactNode;\n  pointsChildren?: ReactNode;\n  onChange: (event: React.ChangeEvent<HTMLTextAreaElement>) => void;\n  cancelHandler: MouseEventHandler<HTMLButtonElement>;\n  saveHandler: MouseEventHandler<HTMLButtonElement>;\n  defaultValue: string;\n  isSubmitDisabled: boolean;\n  questionNumber: number,\n  question: ExerciseQuestionData,\n  availablePoints: AvailablePoints,\n  textHasChanged: boolean;\n  submitBtnLabel: string;\n}\n\nconst TextAreaErrorStyle = css`\n  background-color: #f5e9ea;\n`;\n\nconst StyledFreeResponse = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  .step-card-body {\n    ${mixins.stepCardPadding()}\n  }\n`;\n\nconst SyledQuestionStem = styled.div`\n  font-size: 2rem;\n  line-height: 1.68em;\n  position: relative;\n`;\n\nconst InfoRow = styled.div<{ hasChildren: boolean }>`\n  margin: 8px 0;\n  display: flex;\n  justify-content: ${props => props.hasChildren ? 'space-between' : 'flex-end'};\n  line-height: 1.6rem;\n\n  .word-limit-error-info {\n    color: ${colors.palette.danger};\n  }\n\n  div > span {\n    font-size: 12px;\n    line-height: 16px;\n\n    + span {\n      margin-left: 1rem;\n    }\n  }\n\n  .last-submitted + * {\n    margin-top: 0.8rem;\n  }\n\n  color: ${colors.palette.neutralThin};\n`;\n\nexport const FreeResponseTextArea = styled.textarea<{ isOverWordLimit: boolean } & FreeResponseProps>`\n  display: block;\n  font-family: inherit;\n  font-size: 1.8rem;\n  line-height: 3rem;\n  width: 100%;\n  min-height: 10.5em;\n  line-height: 1.5em;\n  margin: 2.5rem 0 0 0;\n  padding: 0.5em;\n  border: 1px solid ${colors.palette.neutral};\n  color: ${colors.palette.neutralDark};\n  ${props => props.isOverWordLimit && TextAreaErrorStyle};\n  ${props => props.isOverWordLimit && css`\n    border: 2px solid ${colors.palette.danger};\n  `}\n  background-color: ${props => props.readOnly && colors.palette.neutralCool};\n`;\nFreeResponseTextArea.displayName = 'OSFreeResponseTextArea';\n\nconst RevertButton = (props: {\n  disabled: boolean\n} & React.ComponentPropsWithoutRef<'button'>) => (\n  <Button {...props}>\n    Cancel\n  </Button>\n);\n\n\nexport const FreeResponseInput = (props: FreeResponseProps) => {\n  const {\n    availablePoints,\n    cancelHandler,\n    defaultValue,\n    infoRowChildren,\n    isSubmitDisabled,\n    pointsChildren,\n    question,\n    questionNumber,\n    saveHandler,\n    submitBtnLabel,\n    textHasChanged,\n    wordLimit,\n  } = props;\n\n  const isOverWordLimit = countWords(defaultValue) > wordLimit;\n\n  const questionProps = {};\n  if (questionNumber) { questionProps['data-question-number'] = questionNumber; }\n\n  return (\n    <StyledFreeResponse data-test-id=\"student-free-response\">\n      <div className=\"step-card-body\">\n        <SyledQuestionStem {...questionProps}>\n          {question.stem_html &&\n            <QuestionHtml type=\"stem\" html={question.stem_html} hidden={false} />}\n        </SyledQuestionStem>\n        <FreeResponseTextArea\n          {...props}\n          isOverWordLimit={isOverWordLimit}\n          data-test-id=\"free-response-box\"\n          placeholder=\"Enter your response...\"\n          aria-label=\"question response text box\"\n        />\n        <InfoRow hasChildren={!!infoRowChildren}>\n          {infoRowChildren}\n          <div>\n            <span>{countWords(defaultValue)} words</span>\n            {isOverWordLimit && <span className=\"word-limit-error-info\">Maximum {wordLimit} words</span>}\n          </div>\n        </InfoRow>\n      </div>\n      <StepCardFooter>\n        <div className=\"points\">\n          <strong>Points: {availablePoints}</strong>\n          {pointsChildren}\n        </div>\n        <div className=\"controls\">\n          <RevertButton disabled={!textHasChanged} onClick={cancelHandler} />\n          <Button\n            data-test-id=\"submit-answer-btn\"\n            disabled={isSubmitDisabled || isOverWordLimit}\n            onClick={saveHandler}\n          >\n            {submitBtnLabel}\n          </Button>\n        </div>\n      </StepCardFooter>\n    </StyledFreeResponse>\n  );\n}\n\nFreeResponseInput.displayName = 'OSFreeResponse';\n","import { ReactNode } from \"react\";\nimport { breakpoints, colors, mixins } from \"../theme\";\nimport { AvailablePoints, StepBase, StepWithData } from \"../types\";\nimport styled from \"styled-components\";\nimport cn from \"classnames\";\n\nexport const InnerStepCard = styled.div`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  flex: 1 1 auto;\n  min-height: 400px;\n  border-radius: 0.25rem;\n  margin: 0 auto 5rem auto;\n  border: 1px solid ${colors.palette.light};\n  border-radius: 0.25rem;\n  background-color: white;\n\n  ${breakpoints.desktop`\n    max-width: 1000px;\n    min-width: 750px;\n  `}\n`;\n\nexport const OuterStepCard = styled.div`\n  padding: 2rem;\n\n  ${breakpoints.tablet`\n    padding: 0;\n  `}\n`;\n\nconst StepCardHeader = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 16px 24px;\n  background: ${colors.card.background};\n  font-size: 1.8rem;\n  line-height: 3rem;\n\n  div {\n    display: flex;\n    align-items: center;\n  }\n\n  div.question-info {\n    font-weight: bold;\n\n    .ox-icon-lock {\n        margin-right: 1rem;\n    }\n  }\n\n  .num-questions, .points, .separator {\n      display: none;\n  }\n\n  .exercise-id, .separator {\n      font-weight: normal;\n  }\n\n  .separator {\n      margin: 0 1rem;\n  }\n\n  .exercise-id {\n      height: 28px; // Fix baseline issue\n  }\n\n  button {\n    color: ${colors.palette.gray};\n  }\n\n  .openstax-exercise-badges {\n      margin: 0;\n      line-height: 2rem;\n      svg {\n          display: block;\n          &:not(.interactive) {\n              margin: 0 0 0 6px !important;\n          }\n      }\n  }\n\n  ${breakpoints.desktop`\n      button.ox-icon-angle-left, button.ox-icon-angle-right {\n          display: none;\n      }\n      .separator {\n          display: inherit;\n      }\n  `}\n\n    /*\n    1. Show the arrows to move to previous and next question.\n    2. Show the number of questions.\n    3. Override box-shadow of icons when turned into a button.\n    */\n    ${breakpoints.tablet`\n        font-size: 1.6rem;\n        line-height: 2.5rem;\n\n        svg.ox-icon {\n            display: inherit;\n            margin: 0;\n        }\n        button.ox-icon-angle-left {\n            margin-right: ${breakpoints.margins.tablet};\n        }\n        button.ox-icon-angle-right {\n            margin-left: ${breakpoints.margins.tablet};\n        }\n        .openstax-exercise-badges svg {\n            display: none;\n        }\n        .num-questions, points {\n            display: inherit;\n        }\n\n        .exercise-id {\n            display: none;\n        }\n\n        button[class^='ox-icon-angle']:hover {\n            box-shadow: none;\n        }\n  `}\n\n  ${breakpoints.mobile`\n      font-size: 1.4rem;\n      line-height: 2rem;\n      padding: 10px 8px;\n\n      button.ox-icon-angle-left {\n          margin-right: ${breakpoints.margins.mobile};\n      }\n      button.ox-icon-angle-left {\n          margin-right: ${breakpoints.margins.mobile};\n      }\n  `}\n`;\nStepCardHeader.displayName = 'StepCardHeader';\n\nconst StepCardQuestion = styled.div<{ unpadded?: boolean }>`\n  .step-card-body {\n    ${mixins.stepCardPadding()}\n  }\n\n    & + div .step-card-body {\n        padding-top: 0;\n    }\n\n    &.exercise-context, &.exercise-stimulus, &.exercise-stem {\n        padding-bottom: 0;\n    }\n\n    ${breakpoints.only.mobile`\n        && .question-feedback {\n            margin-left: 0;\n\n           .arrow { margin-left: 12px; }\n        }\n    `}\n\n    .reading-step & {\n        padding: 0;\n    }\n\n    ${breakpoints.desktop`\n        .video-step &, .interactive-step & {\n            .openstax-exercise-badges {\n              margin-right: 3.8rem;\n            }\n        }\n    `}\n\n    ${breakpoints.mobile`\n        .openstax-exercise-badges svg {\n            margin-right: ${breakpoints.margins.mobile};\n        }\n    `}\n\n    &&& {\n        .openstax-has-html .splash .frame-wrapper { margin-top: 0; }\n    }\n`;\n\ninterface SharedProps {\n  questionNumber: number;\n  numberOfQuestions: number;\n  leftHeaderChildren?: ReactNode;\n  rightHeaderChildren?: ReactNode;\n  headerTitleChildren?: ReactNode;\n}\n\nexport interface StepCardProps extends SharedProps {\n  unpadded: boolean;\n  className?: string;\n  children?: ReactNode;\n  stepType: StepWithData['type'];\n  availablePoints?: AvailablePoints;\n  questionId?: string;\n  multipartBadge?: ReactNode;\n  isHomework: boolean;\n  wrapsExercise: boolean;\n}\n\nconst StepCard = ({\n  questionNumber,\n  numberOfQuestions,\n  stepType,\n  isHomework,\n  availablePoints,\n  unpadded, // currently does nothing; may need to restore if this causes tutor stepcard regression\n  className,\n  children,\n  questionId,\n  multipartBadge,\n  leftHeaderChildren,\n  rightHeaderChildren,\n  headerTitleChildren,\n  wrapsExercise,\n  ...otherProps }: StepCardProps) => {\n  return (\n    <OuterStepCard {...otherProps}>\n      {multipartBadge}\n      <InnerStepCard className={className}>\n        {questionNumber && isHomework && stepType === 'exercise' &&\n          <StepCardHeader>\n            <div>\n              {leftHeaderChildren}\n              <div className=\"question-info\">\n                {headerTitleChildren}\n                <span>{wrapsExercise ? 'Exercise' : 'Question'} {questionNumber}</span>\n                <span className=\"num-questions\">&nbsp;/ {numberOfQuestions}</span>\n                <span className=\"separator\">|</span>\n                <span className=\"question-id\">ID: {questionId}</span>\n              </div>\n            </div>\n            <div>\n              {availablePoints && <div className=\"points\">{availablePoints} Points</div>}\n              {rightHeaderChildren}\n            </div>\n          </StepCardHeader>\n        }\n        <StepCardQuestion unpadded={unpadded}>{children}</StepCardQuestion>\n      </InnerStepCard>\n    </OuterStepCard>\n  )\n};\nStepCard.displayName = 'OSStepCard';\n\nexport interface TaskStepCardProps extends SharedProps {\n  className?: string;\n  children?: ReactNode;\n  step: StepBase | StepWithData;\n  questionNumber: number;\n  numberOfQuestions: number;\n  wrapsExercise: boolean;\n}\n\nconst TaskStepCard = ({\n  step,\n  questionNumber,\n  numberOfQuestions,\n  children,\n  className,\n  ...otherProps\n}: TaskStepCardProps) =>\n(<StepCard {...otherProps}\n  unpadded={true}\n  questionNumber={questionNumber}\n  numberOfQuestions={numberOfQuestions}\n  stepType={'type' in step ? step.type : 'exercise'}\n  isHomework={'task' in step ? (step.task === undefined || step.task.type === 'homework') : true}\n  data-task-step-id={step.id}\n  availablePoints={step.available_points}\n  className={cn(`${('type' in step ? step.type : 'exercise')}-step`, className)}\n  questionId={step.uid}\n>\n  {children}\n</StepCard>);\n\nTaskStepCard.displayName = 'OSTaskStepCard';\n\nexport { StepCard, TaskStepCard };\n","import { AvailablePoints, ID, ExerciseQuestionData, Task } from \"../types\";\nimport Button from \"./Button\";\nimport { Content } from \"./Content\";\nimport { Question } from './Question';\nimport { StepCardFooter } from \"./StepCardFooter\";\n\nexport interface ExerciseQuestionProps {\n  task?: Task;\n  question: ExerciseQuestionData;\n  answer_id_order?: ID[];\n  questionNumber: number;\n  choicesEnabled: boolean;\n  hasMultipleAttempts: boolean;\n  onAnswerChange: () => void;\n  onAnswerSave: () => void;\n  onNextStep: () => void;\n  feedback_html: string;\n  correct_answer_feedback_html: string;\n  is_completed: boolean;\n  correct_answer_id: ID;\n  incorrectAnswerId: ID;\n  answer_id?: ID;\n  attempts_remaining: number;\n  published_comments?: string;\n  detailedSolution?: string;\n  canAnswer: boolean;\n  needsSaved: boolean;\n  canUpdateCurrentStep: boolean;\n  attempt_number: number;\n  apiIsPending: boolean;\n  displaySolution: boolean;\n  available_points: AvailablePoints;\n  exercise_uid: string;\n  free_response?: string;\n  show_all_feedback?: boolean;\n}\n\nconst AttemptsRemaining = ({ count }: { count: number }) => {\n  return (\n    <div>{count} attempt{count === 1 ? '' : 's'} left</div>\n  );\n}\n\nconst PublishedComments = ({ published_comments }: { published_comments?: string }) => {\n  if (!published_comments) { return null; }\n\n  return (\n    <div>\n      <strong>Feedback:</strong> {published_comments}\n    </div>\n  );\n}\n\nconst SaveButton = (props: {\n  disabled: boolean, isWaiting: boolean, attempt_number: number\n} & React.ComponentPropsWithoutRef<'button'>) => (\n  <Button\n    {...props}\n    waitingText=\"Saving…\"\n    isWaiting={props.isWaiting}\n    data-test-id=\"submit-answer-btn\"\n  >\n    {props.attempt_number == 0 ? 'Submit' : 'Re-submit'}\n  </Button>\n);\n\nconst NextButton = (props: {\n  canUpdateCurrentStep: boolean,\n  onNextStep: ExerciseQuestionProps['onNextStep']\n}) => {\n  return (\n    <Button onClick={props.onNextStep} data-test-id=\"continue-btn\">\n      {props.canUpdateCurrentStep ? 'Continue' : 'Next'}\n    </Button>\n  );\n}\n\nconst FreeResponseReview = ({ free_response }: Pick<ExerciseQuestionProps, \"free_response\">) => {\n  if (!free_response) { return null; }\n  return (\n    <>\n      <div className=\"free-response\">{free_response}</div>\n    </>\n  );\n}\n\nexport const ExerciseQuestion = (props: ExerciseQuestionProps) => {\n  const {\n    question, task, answer_id_order, onAnswerChange, feedback_html, correct_answer_feedback_html,\n    is_completed, correct_answer_id, incorrectAnswerId, choicesEnabled, questionNumber,\n    answer_id, hasMultipleAttempts, attempts_remaining, published_comments, detailedSolution,\n    canAnswer, needsSaved, attempt_number, apiIsPending, onAnswerSave, onNextStep, canUpdateCurrentStep,\n    displaySolution, available_points, free_response, show_all_feedback\n  } = props;\n\n  return (\n    <div data-test-id=\"student-exercise-question\">\n      <Question\n        task={task}\n        question={question}\n        answerIdOrder={answer_id_order}\n        choicesEnabled={choicesEnabled}\n        answer_id={answer_id}\n        questionNumber={questionNumber}\n        onChange={onAnswerChange}\n        feedback_html={feedback_html}\n        correct_answer_feedback_html={correct_answer_feedback_html}\n        correct_answer_id={is_completed ? correct_answer_id : null}\n        incorrectAnswerId={incorrectAnswerId}\n        className=\"step-card-body\"\n        hideAnswers={false}\n        displayFormats={false}\n        displaySolution={displaySolution}\n        show_all_feedback={show_all_feedback}\n      >\n        <FreeResponseReview free_response={free_response} />\n      </Question>\n      <StepCardFooter className=\"step-card-footer\">\n        <div className=\"points\">\n          <strong>Points: {available_points}</strong>\n          <span className=\"attempts-left\">\n            {hasMultipleAttempts &&\n              attempts_remaining > 0 &&\n              <AttemptsRemaining count={attempts_remaining} />}\n          </span>\n          <PublishedComments published_comments={published_comments} />\n          {detailedSolution && (<div><strong>Detailed solution:</strong> <Content html={detailedSolution} /></div>)}\n        </div>\n        <div className=\"controls\">\n          {canAnswer && needsSaved ?\n            <SaveButton\n              disabled={apiIsPending || !answer_id}\n              isWaiting={apiIsPending}\n              attempt_number={attempt_number}\n              onClick={onAnswerSave}\n            /> :\n            <NextButton onNextStep={onNextStep} canUpdateCurrentStep={canUpdateCurrentStep} />}\n        </div>\n      </StepCardFooter>\n    </div>\n  );\n}\n","import styled from 'styled-components';\nimport { Content } from './Content';\nimport { TaskStepCard } from './Card';\nimport { Answer, ExerciseData, ID, QuestionState, StepBase, StepWithData } from '../../src/types';\nimport { ExerciseQuestion } from './ExerciseQuestion';\n\nconst StyledTaskStepCard = styled(TaskStepCard)`\n  font-size: 1.8rem;\n  line-height: 3rem;\n`;\n\nconst Preamble = ({ exercise }: { exercise: ExerciseData }) => {\n  return (\n    <>\n      {exercise.context &&\n        <Content className=\"step-card-body exercise-context\"\n          block html={exercise.context} />}\n\n      {exercise.stimulus_html &&\n        <Content className=\"step-card-body exercise-stimulus\"\n          block html={exercise.stimulus_html} />}\n    </>\n  );\n};\n\ninterface ExerciseBaseProps {\n  step: StepBase;\n  exercise: ExerciseData;\n  numberOfQuestions: number;\n  questionNumber: number;\n  answer_id_order?: ID[];\n  hasMultipleAttempts: boolean;\n  onAnswerSave: () => void;\n  onNextStep: () => void;\n  apiIsPending: boolean;\n  show_all_feedback?: boolean;\n  canUpdateCurrentStep: boolean;\n}\n\nexport interface ExerciseWithStepDataProps extends ExerciseBaseProps {\n  step: StepWithData;\n  canAnswer: boolean;\n  needsSaved: boolean;\n  onAnswerChange: (answer: Answer) => void;\n}\n\nexport interface ExerciseWithQuestionStatesProps extends ExerciseBaseProps {\n  questionStates: { [key: ID]: QuestionState };\n  onAnswerChange: (answer: Omit<Answer, 'id'> & { id: number, question_id: number }) => void;\n}\n\nexport const Exercise = ({\n  numberOfQuestions, questionNumber, step, exercise, show_all_feedback, ...props\n}: ExerciseWithStepDataProps | ExerciseWithQuestionStatesProps) => (\n  <StyledTaskStepCard\n    step={step}\n    questionNumber={questionNumber}\n    numberOfQuestions={numberOfQuestions}\n    wrapsExercise={!('feedback_html' in step)}\n  >\n    <Preamble exercise={exercise} />\n\n    {exercise.questions.map((q) => {\n      const state = { ...('feedback_html' in step ? step : props['questionStates'][q.id]) };\n      return (\n        <ExerciseQuestion\n          {...props}\n          {...state}\n          exercise_uid={exercise.uid}\n          key={q.id}\n          question={q}\n          questionNumber={questionNumber}\n          choicesEnabled={state.canAnswer}\n          displaySolution={true}\n          detailedSolution={state.solution?.content_html}\n          show_all_feedback={show_all_feedback}\n        />\n      )\n    }\n    )}\n  </StyledTaskStepCard>\n);\n","import styled, { css } from 'styled-components';\nimport { colors, breakpoints } from '../theme';\n\nconst ProgressBarWrapper = styled.div`\n  display: flex;\n  justify-content: flex-start;\n  flex-wrap: wrap;\n  margin: 3.2rem;\n  ${breakpoints.mobile`\n    margin: 1rem;\n  `}\n`;\n\nconst StyledItemWrapper = styled.span`\n  display: flex;\n  align-items: center;\n  margin-bottom: 1rem;\n\n  &::after {\n    content: \"\";\n    display: block;\n    height: 0.1rem;\n    width: 1rem;\n    background-color: ${colors.palette.pale};\n  }\n\n  &:last-child {\n    &::after {\n      content: none;\n    }\n  }\n\n  ${breakpoints.mobile`\n    &::after {\n      width: 3.3rem;\n    }\n  `}\n`;\n\nconst handleVariant = (variant: ProgressBarItemVariant, isActive: boolean) => {\n  switch (variant) {\n    case 'isCorrect':\n      return css`\n        color: ${colors.palette.white};\n        background-color: rgba(99, 165, 36, 0.6);\n        border-color: ${colors.palette.darkGreen};\n        box-shadow: ${isActive ? '0 0 6px rgba(0, 0, 0, 0.4)' : 'none'};\n      `;\n    case 'isIncorrect':\n      return css`\n        color: ${colors.palette.white};\n        background-color: ${colors.palette.lightRed};\n        border-color: ${colors.palette.darkRed};\n        box-shadow: ${isActive ? '0 0 6px rgba(0, 0, 0, 0.4)' : 'none'};\n      `;\n    default:\n      return css`\n        color: ${colors.palette.darkGray};\n        background-color: ${isActive ? colors.palette.white : colors.palette.neutralLight};\n        border-color: ${isActive ? colors.palette.darkGray : colors.palette.neutralLight};\n        box-shadow: ${isActive ? '0 0 6px rgba(0, 0, 0, 0.4)' : 'none'};\n      `;\n  }\n};\n\nexport const StyledItem = styled.button<{ variant: ProgressBarItemVariant, isActive: boolean }>`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 2.4rem;\n  height: 2.4rem;\n  border-radius: 50%;\n  border-width: 1px;\n  border-style: solid;\n  margin: 0 0.3rem;\n  font-weight: bold;\n  cursor: pointer;\n  ${props => handleVariant(props.variant, props.isActive)}\n`;\n\nexport interface ProgressBarProps<S extends {variant: ProgressBarItemVariant}> {\n  steps: S[];\n  activeIndex: number | null;\n  goToStep: (index: number, step: S) => void;\n}\n\nexport interface ProgressBarItemProps<S> {\n  index: number;\n  isActive: boolean;\n  step: S;\n  goToStep: (index: number, step: S) => void;\n}\n\nexport type ProgressBarItemVariant = 'isCorrect' | 'isIncorrect' | null;\n\nexport const ProgressBarItem = <S extends {variant: ProgressBarItemVariant}>({index, isActive, step, goToStep}: ProgressBarItemProps<S>) =>\n  <StyledItemWrapper>\n    <StyledItem variant={step.variant} isActive={isActive} onClick={() => goToStep(index, step)}>{index + 1}</StyledItem>\n  </StyledItemWrapper>;\n\nexport const ProgressBar = <S extends {variant: ProgressBarItemVariant}>({ steps, activeIndex, goToStep }: ProgressBarProps<S>) => <ProgressBarWrapper>\n  {steps.map((step, index) => <ProgressBarItem\n    key={index}\n    index={index}\n    isActive={index === activeIndex}\n    step={step}\n    goToStep={goToStep}\n  />)}\n</ProgressBarWrapper>;\n\n"],"names":["ALPHABET","isAnswerIncorrect","answer","incorrectAnswerId","id","countWords","text","words","trim","match","length","_ref","html","component","block","_ref$block","props","undefined","React","cloneElement","_jsx","_extends","dangerouslySetInnerHTML","__html","SimpleFeedback","children","Content","contentRenderer","className","classnames","Feedback","wrapperClasses","position","_jsxs","Answer","body","feedback","selectedCount","onChangeAnswer","radioBox","type","iter","disabled","onKeyPress","qid","correctAnswerId","hasCorrectAnswer","answered_count","show_all_feedback","chosenAnswer","Boolean","find","a","isAnswerChecked","isCorrect","correctness","isAnswerCorrect","isIncorrect","correctIncorrectIcon","classes","cn","isChecked","ariaLabel","onChange","checked","name","feedback_html","percent","selected_count","Math","round","green","red","content_html","_Fragment","htmlFor","onClick","role","displayName","_templateObject","_templateObject2","AnswersTable","idCounter","question","correct_answer_id","correct_answer_feedback_html","_props$show_all_feedb","answerIdOrder","instructions","hideAnswers","idOrder","questionAnswerProps","answer_id","_props$type","choicesEnabled","answers","slice","sort","b","indexOf","map","i","additionalProps","question_id","parseInt","toString","key","answerProps","Object","assign","push","index","forEach","item","spliceIndex","answersHtml","splice","palette","danger","darkRed","lightRed","lightGreen","darkGreen","paleYellow","teal","blue","lightBlue","neutralLightBlue","tangerine","gray","darkGray","pale","light","white","neutralLightest","neutralCool","neutralBright","neutralLighter","neutralLight","neutralMedium","neutral","neutralThin","neutralDark","neutralFeedback","neutralDarker","black","orange","color","correct","background","incorrect","hover","label","colorHover","colorSelected","arrowOuterColor","popover","borderColor","card","button","backgroundHover","backgroundActive","freeResponse","breakpoints","BREAKPOINTS","css","apply","call","arguments","_templateObject3","_taggedTemplateLiteralLoose","colors","answerColor","values","_templateObject6","answerChecked","answerCorrect","mixins","answerIncorrect","answerHover","answerCorrectText","answerCorrectAnswer","_templateObject9","resetText","_templateObject10","stepCardPadding","_templateObject12","_templateObject13","StyledQuestion","styled","div","Question","exerciseUid","solution","exercise_uid","questionNumber","context","task","hidePreambles","stem_html","collaborator_solutions","_question$collaborato","formats","stimulus_html","is_deleted","_question$collaborato2","displaySolution","s","hasSolution","join","QuestionHtml","hidden","displayFormats","FormatsListing","_props$html","_ref$formats","format","StyledButton","Button","isWaiting","waitingText","otherProps","_excluded","StepCardFooter","TextAreaErrorStyle","StyledFreeResponse","SyledQuestionStem","InfoRow","_templateObject4","hasChildren","FreeResponseTextArea","textarea","_templateObject5","isOverWordLimit","readOnly","RevertButton","FreeResponseInput","availablePoints","cancelHandler","defaultValue","infoRowChildren","isSubmitDisabled","pointsChildren","saveHandler","submitBtnLabel","textHasChanged","wordLimit","questionProps","placeholder","InnerStepCard","OuterStepCard","StepCardHeader","_templateObject7","_templateObject8","StepCardQuestion","_templateObject11","StepCard","numberOfQuestions","stepType","isHomework","unpadded","questionId","multipartBadge","leftHeaderChildren","rightHeaderChildren","headerTitleChildren","wrapsExercise","_objectWithoutPropertiesLoose","TaskStepCard","step","_ref2","available_points","uid","count","PublishedComments","published_comments","attempt_number","NextButton","onNextStep","canUpdateCurrentStep","FreeResponseReview","_ref3","free_response","hasMultipleAttempts","attempts_remaining","detailedSolution","canAnswer","needsSaved","apiIsPending","onAnswerSave","answer_id_order","onAnswerChange","is_completed","AttemptsRemaining","SaveButton","StyledTaskStepCard","Preamble","exercise","questions","q","_state$solution","state","_createElement","ExerciseQuestion","ProgressBarWrapper","StyledItemWrapper","span","handleVariant","variant","isActive","ProgressBarItem","goToStep","StyledItem","activeIndex","steps"],"mappings":"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"}
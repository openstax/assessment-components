{"version":3,"file":"index.module.js","sources":["../src/utils.ts","../src/components/Content.tsx","../src/components/Feedback.tsx","../src/components/Answer.tsx","../src/constants.ts","../src/components/AnswersTable.tsx","../src/theme.ts","../src/components/Card.tsx","../src/components/StepCardFooter.tsx","../src/components/Button.tsx","../src/components/CompletionStatus.tsx","../src/components/Question.tsx","../src/components/FreeResponseInput.tsx","../src/components/ExerciseIcons.tsx","../src/components/ExerciseQuestion.tsx","../src/components/Exercise.tsx","../src/assets/flag.tsx","../src/components/ProgressBar.tsx","../src/components/Loader.tsx"],"sourcesContent":["import { Answer, ChosenAnswer, ID } from '../src/types';\n\nexport const ALPHABET = 'abcdefghijklmnopqrstuvwxyz';\n\nconst MAX_CORRECTNESS = '1.0';\n\nexport const isAnswerCorrect = function(answer: Answer, correctAnswerId?: ID | null) {\n  // if answer does not have an id, check the isCorrect property.\n  if (!(answer.id || correctAnswerId)) {\n    return answer.isCorrect;\n  }\n  let isCorrect = answer.id === correctAnswerId;\n  if (answer.correctness != null) { isCorrect = (answer.correctness === MAX_CORRECTNESS); }\n\n  return isCorrect;\n};\n\nexport const isAnswerIncorrect = function(answer: Answer, incorrectAnswerId?: ID) {\n  // Allow multiple attempts to show incorrectness without the correct_answer_id\n  return answer.id === incorrectAnswerId;\n};\n\nexport const isAnswerChecked = (answer: Answer, chosenAnswer?: ChosenAnswer) =>\n  Boolean((chosenAnswer || []).find( a => a == answer.id));\n\nexport function countWords(text: string) {\n  const trimmedText = text.trim();\n  //https://css-tricks.com/build-word-counter-app/\n  const words = trimmedText.match(/\\b[-?(\\w+)?]+\\b/gi);\n  if(!words) return 0;\n  return words.length;\n}\n\nexport const numberfyId = (id: ID) => typeof id === 'string' ? parseInt(id, 10) : id;\n","import React from \"react\";\n\n/* eslint-disable-next-line @typescript-eslint/no-explicit-any */\ntype ComponentType = keyof JSX.IntrinsicElements | React.JSXElementConstructor<any>;\n\nexport interface ContentProps<T extends ComponentType | undefined> {\n  className?: string;\n  component?: T extends undefined ? undefined :\n    T extends ComponentType ? React.ReactComponentElement<T>:\n    never;\n  html: string;\n  block?: boolean;\n}\n\nexport const Content = (<T extends ComponentType | undefined>(\n  {html, component, block = false, ...props}: ContentProps<T>\n) => {\n  if (component !== undefined) {\n    return React.cloneElement(component, {html, ...props});\n  }\n  if (block) {\n    return <div dangerouslySetInnerHTML={{ __html: html }} {...props} />;\n  } else {\n    return <span dangerouslySetInnerHTML={{ __html: html }} {...props} />;\n  }\n});\n","import classnames from 'classnames';\nimport { Content } from './Content';\n\ninterface FeedbackProps {\n  position?: 'top' | 'bottom' | 'left' | 'right';\n  children: string;\n  className?: string;\n  contentRenderer?: JSX.Element;\n}\n\nconst SimpleFeedback = (props: Pick<FeedbackProps, 'children' | 'className' | 'contentRenderer'>) => (\n  <aside>\n    <Content\n      component={props.contentRenderer}\n      className={classnames('question-feedback-content', 'has-html', props.className)}\n      html={props.children}\n      block={true} />\n  </aside>\n);\n\nconst Feedback = (props: FeedbackProps) => {\n  const position = props.position || 'bottom';\n  const wrapperClasses = classnames('question-feedback', position);\n\n  return (\n    <aside className={wrapperClasses}>\n      <div className=\"arrow\" aria-label=\"Answer Feedback\" />\n      <SimpleFeedback {...props}>\n        {props.children}\n      </SimpleFeedback>\n    </aside>\n  );\n};\n\nexport { Feedback, SimpleFeedback };\n","import cn from 'classnames';\nimport { ReactNode } from 'react';\nimport { ALPHABET, isAnswerChecked, isAnswerCorrect, isAnswerIncorrect } from '../utils';\nimport { Answer as AnswerType, ChosenAnswer, ID } from '../types';\nimport { Content } from './Content';\nimport { SimpleFeedback } from './Feedback';\n\nexport interface AnswerProps {\n  answer: AnswerType;\n  iter: number;\n  qid: ID;\n  type: 'teacher-review' | 'teacher-preview' | 'student' | 'student-mpp';\n  hasCorrectAnswer?: boolean;\n  onChangeAnswer?: (answer: AnswerType) => void;\n  disabled: boolean;\n  chosenAnswer: ChosenAnswer;\n  correctAnswerId?: ID | null;\n  incorrectAnswerId?: ID;\n  onKeyPress?: () => void;\n  answered_count?: number;\n  correctIncorrectIcon?: ReactNode,\n  radioBox?: ReactNode;\n  contentRenderer?: JSX.Element;\n  show_all_feedback?: boolean;\n  tableFeedbackEnabled?: boolean;\n}\n\nexport const Answer = (props: AnswerProps) => {\n  const {\n    type,\n    iter,\n    answer,\n    disabled,\n    onKeyPress,\n    qid,\n    chosenAnswer,\n    correctAnswerId,\n    incorrectAnswerId,\n    hasCorrectAnswer,\n    answered_count,\n    contentRenderer,\n    show_all_feedback,\n    tableFeedbackEnabled,\n  } = props;\n\n  let body, feedback, selectedCount;\n\n  const isChecked = isAnswerChecked(answer, chosenAnswer);\n  const isCorrect = isAnswerCorrect(answer, correctAnswerId);\n  const isIncorrect = isAnswerIncorrect(answer, incorrectAnswerId);\n\n  const correctIncorrectIcon = (\n    <div className=\"correct-incorrect\">\n      {isCorrect && props.correctIncorrectIcon}\n    </div>\n  );\n\n  const classes = cn('answers-answer', {\n    'disabled': disabled,\n    'answer-checked': isChecked,\n    'answer-correct': isCorrect && type !== 'student-mpp',\n    'answer-incorrect': incorrectAnswerId && isAnswerIncorrect(answer, incorrectAnswerId),\n  });\n\n  let ariaLabel = `${isChecked ? 'Selected ' : ''}Choice ${ALPHABET[iter]}`;\n  // somewhat misleading - this means that there is a correct answer,\n  // not necessarily that this answer is correct\n  if (hasCorrectAnswer) {\n    ariaLabel += `(${isCorrect ? 'Correct' : 'Incorrect'} Answer)`;\n  }\n  ariaLabel += ':';\n\n  let onChangeAnswer: AnswerProps['onChangeAnswer'], radioBox;\n\n  const onChange = () => onChangeAnswer && onChangeAnswer(answer);\n\n  if (!hasCorrectAnswer\n    && (type !== 'teacher-review')\n    && (type !== 'teacher-preview')\n    && (type !== 'student-mpp')) {\n    ({ onChangeAnswer } = props);\n  }\n\n  if (onChangeAnswer) {\n    radioBox = (\n      <input\n        type=\"radio\"\n        className=\"answer-input-box\"\n        checked={isChecked}\n        id={`${qid}-option-${iter}`}\n        name={`${qid}-options`}\n        onChange={onChange}\n        disabled={disabled}\n      />\n    );\n  }\n\n  if (show_all_feedback && answer.feedback_html && !tableFeedbackEnabled) {\n    feedback = (\n      <SimpleFeedback key=\"question-mc-feedback\" contentRenderer={contentRenderer}>\n        {answer.feedback_html}\n      </SimpleFeedback>\n    );\n  }\n\n  if (type === 'teacher-review') {\n    let percent = 0;\n    if (answer.selected_count && answered_count) {\n      percent = Math.round((answer.selected_count / answered_count) * 100);\n    }\n    selectedCount = (\n      <span\n        className=\"selected-count\"\n        data-percent={`${percent}`}\n      >\n        {answer.selected_count}\n      </span>\n    );\n\n    body = (\n      <div className=\"review-wrapper\">\n        <div className={cn('review-count', { 'green': isCorrect, 'red': !isCorrect })}>\n          {selectedCount}\n          <span className={cn('letter', { 'green': isCorrect, 'red': !isCorrect })}>\n            {ALPHABET[iter]}\n          </span>\n        </div>\n\n        <div className=\"answer-answer\">\n          <Content className=\"answer-content\" component={contentRenderer} html={answer.content_html} />\n          {feedback}\n        </div>\n      </div>\n    );\n  } else {\n    body = (\n      <>\n        {type === 'teacher-preview' && correctIncorrectIcon}\n        {selectedCount}\n        {radioBox}\n        <label\n          onKeyPress={onKeyPress}\n          htmlFor={`${qid}-option-${iter}`}\n          className=\"answer-label\">\n          <span className=\"answer-letter-wrapper\">\n            <button\n              onClick={onChange}\n              aria-label={ariaLabel}\n              className=\"answer-letter\"\n              disabled={disabled || isIncorrect}\n              data-test-id={`answer-choice-${ALPHABET[iter]}`}\n            >\n              {ALPHABET[iter]}\n            </button>\n          </span>\n          <div className=\"answer-answer\">\n            <Content className=\"answer-content\" component={contentRenderer} html={answer.content_html} />\n            {feedback}\n          </div>\n        </label>\n      </>\n    );\n  }\n\n  return (\n    <div className=\"openstax-answer\">\n      <section role=\"region\" className={classes}>\n        {body}\n      </section>\n    </div>\n  );\n}\nAnswer.displayName = 'OSAnswer';\n","import { AnswerDisplayType } from './types';\n\nexport const defaultAnswerType: AnswerDisplayType = 'student';\n","import { defaultAnswerType } from \"../constants\";\nimport { Answer as AnswerType, AnswerDisplayType, ID, ExerciseQuestionData } from \"src/types\";\nimport { Answer } from \"./Answer\";\nimport { Feedback } from \"./Feedback\";\n\nexport interface AnswersTableProps {\n  question: ExerciseQuestionData;\n  type?: AnswerDisplayType;\n  answer_id?: ID;\n  correct_answer_id?: ID | null;\n  incorrectAnswerId?: ID;\n  answerIdOrder?: ID[],\n  feedback_html: string;\n  correct_answer_feedback_html?: string;\n  answered_count?: number;\n  show_all_feedback?: boolean;\n  tableFeedbackEnabled?: boolean;\n  onChangeAnswer: () => void;\n  hideAnswers: boolean;\n  hasCorrectAnswer?: boolean;\n  onChangeAttempt?: () => void;\n  choicesEnabled?: boolean;\n  onKeyPress?: () => void;\n  contentRenderer?: JSX.Element;\n  instructions?: JSX.Element;\n}\n\nexport const AnswersTable = (props: AnswersTableProps) => {\n  let idCounter = 0;\n\n  const {\n    question, hideAnswers, type = defaultAnswerType, answered_count, choicesEnabled, correct_answer_id,\n    incorrectAnswerId, answer_id, feedback_html, correct_answer_feedback_html,\n    show_all_feedback = false, tableFeedbackEnabled, hasCorrectAnswer, onChangeAnswer, onKeyPress, answerIdOrder, instructions\n  } = props;\n  if (hideAnswers) { return null; }\n\n  const { id } = question;\n\n  const feedback: { index: number, html: string }[] = [];\n\n  const chosenAnswer = [answer_id];\n\n  const sortedAnswersByIdOrder = (idOrder: ID[]) => {\n    const { answers } = question;\n    return answers.slice().sort((a, b) => idOrder.indexOf(a.id) - idOrder.indexOf(b.id));\n  }\n\n  const questionAnswerProps = {\n    qid: id || `auto-${idCounter++}`,\n    correctAnswerId: correct_answer_id,\n    incorrectAnswerId,\n    hasCorrectAnswer,\n    chosenAnswer,\n    onChangeAnswer: onChangeAnswer,\n    type,\n    answered_count,\n    disabled: !choicesEnabled,\n    show_all_feedback,\n    tableFeedbackEnabled,\n    onKeyPress\n  };\n\n  const answers = answerIdOrder ? sortedAnswersByIdOrder(answerIdOrder) : question.answers;\n\n  const answersHtml = answers.map((answer, i) => {\n    const additionalProps: { answer: AnswerType, iter: number, key: string }\n      = {\n        answer: {\n          ...answer,\n          question_id: typeof question.id === 'string' ? parseInt(question.id, 10) : question.id\n         },\n      iter: i,\n      key: `${questionAnswerProps.qid}-option-${i}`\n    };\n    const answerProps = Object.assign({}, additionalProps, questionAnswerProps);\n\n    if (show_all_feedback && answer.feedback_html && tableFeedbackEnabled) {\n      feedback.push({ index: i, html: answer.feedback_html })\n    } else if (answer.id === incorrectAnswerId && feedback_html) {\n      feedback.push({ index: i, html: feedback_html })\n    } else if (answer.id === correct_answer_id && correct_answer_feedback_html) {\n      feedback.push({ index: i, html: correct_answer_feedback_html })\n    }\n\n    return (\n      <Answer {...answerProps} />\n    );\n  });\n\n  feedback.forEach((item, i) => {\n    const spliceIndex = item.index + i + 1;\n    answersHtml.splice(spliceIndex, 0, (\n      <Feedback key={spliceIndex} contentRenderer={props.contentRenderer}>\n        {item.html}\n      </Feedback>\n    ));\n  });\n\n  return (\n    <div className=\"answers-table\">\n      {instructions}\n      {answersHtml}\n    </div>\n  );\n}\n","import { css } from 'styled-components';\n\nconst palette = {\n  red: \"#ca2026\",\n  danger: \"#c2002f\",\n  darkRed: \"#c22032\",\n  lightRed: \"#e298a0\",\n  green: \"#77af42\",\n  lightGreen: \"#8bc753\",\n  darkGreen: \"#63a524\",\n  paleYellow: \"#ffffbb\",\n  teal: \"#0dc0de\",\n  blue: \"#007da4\",\n  mediumBlue: \"#026AA1\",\n  lightBlue: \"#34bdd8\",\n  neutralLightBlue: \"#0dc0dc\",\n  tangerine: \"#ffbd3e\",\n  gray: \"#5e5e5e\",\n  darkGray: \"#757575\",\n  pale: \"#d5d5d5\",\n  light: \"#e4e4e4\",\n  white: \"#ffffff\",\n  neutralLightest: \"#f9f9f9\", // nearly white\n  neutralCool: \"#f6f7f8\", // cool bright gray\n  neutralBright: \"#f5f5f5\", // bright gray\n  neutralLighter: \"#f1f1f1\", // light gray\n  neutralLight: \"#e5e5e5\", // light gray\n  neutralMedium: \"#a0a0a0\", // light gray\n  neutral: \"#818181\", // gray\n  neutralThin: \"#6f6f6f\", // medium gray\n  neutralDark: \"#5f6163\", // dark gray\n  neutralFeedback: \"#555\", // another dark gray\n  neutralDarker: \"#424242\", // very dark gray\n  black: \"#000000\",\n  orange: \"#D4450C\"\n};\n\nexport const colors = {\n  palette: palette,\n  answer: {\n    color: palette.lightBlue,\n    correct: {\n      color: palette.green,\n      background: \"#77af42\",\n    },\n    incorrect: {\n      color: palette.red,\n      background: palette.red,\n    },\n    checked: palette.lightBlue,\n    hover: palette.neutralDark,\n    label: {\n      color: palette.neutral,\n      colorHover: palette.neutralDark,\n      colorSelected: palette.lightBlue,\n    },\n  },\n  popover: {\n    arrowOuterColor: \"rgba(0, 0, 0, 0.25)\",\n    borderColor: \"rgba(0, 0, 0, 0.2)\",\n  },\n  card: {\n    header: {\n     background: \"#daf3f8\"\n    },\n    body: {\n      background: \"#fdfdfd\"\n    }\n  },\n  button: {\n    background: palette.orange,\n    backgroundHover: \"#E74B0D\",\n    backgroundActive: \"#C5400B\"\n  },\n  freeResponse: {\n    color: palette.neutralDark,\n    background: palette.neutralLighter,\n  },\n};\n\nexport const layouts = {\n  answer: {\n    verticalSpacing: \"1rem\",\n    horizontalSpacing: \"1rem\",\n    horizontalBuffer: \"2.5rem\",\n    bubbleSize: \"3.6rem\",\n    labelSpacing: \"6.5rem\",\n    feedback: {\n      popover: {\n        horizontalSpacing: \"1.1rem\",\n        verticalSpacing: \"0.9rem\",\n        maxWidth: \"370px\",\n      },\n    },\n  },\n  popover: {\n    arrow: {\n      width: \"16px\",\n      height: \"8px\",\n      edgeDistance: \"9px\",\n    },\n    horizontalSpacing: \"0.8rem\",\n    verticalSpacing: \"1rem\",\n    horizontalBuffer: \"4rem\",\n    borderWidth: \"1px\",\n    maxWidth: \"325px\",\n  }\n};\n\nexport const BREAKPOINTS = {\n  mobile: 600,\n  tablet: 999,\n  desktop: 1000,\n  large: 1600,\n};\n\nexport const breakpoints = {\n  mobile(...args: Parameters<typeof css>) {\n    return css`@media(max-width: ${BREAKPOINTS.mobile}px) { ${css(...args)} }`;\n  },\n  tablet(...args: Parameters<typeof css>) {\n    return css`@media(max-width: ${BREAKPOINTS.tablet}px) { ${css(...args)} }`;\n  },\n  desktop(...args: Parameters<typeof css>) {\n    return css`@media(min-width: ${BREAKPOINTS.desktop}px) { ${css(...args)} }`;\n  },\n  only: {\n    mobile(...args: Parameters<typeof css>) {\n      return css`@media(max-width: ${BREAKPOINTS.mobile}px) { ${css(...args)} }`;\n    },\n  },\n  margins: {\n    mobile: '8px',\n    tablet: '24px',\n  },\n};\n\nexport const transitions = {\n  answer: \"0.1s ease-in-out\",\n}\n\nexport const mixins = {\n  answer: () => css`\n    .answer-label {\n      display: flex;\n    }\n    color: ${colors.answer.label.color};\n    .answer-letter {\n      width: ${layouts.answer.bubbleSize};\n      height: ${layouts.answer.bubbleSize};\n      min-width: ${layouts.answer.bubbleSize};\n      min-height: ${layouts.answer.bubbleSize};\n      border-radius: calc(${layouts.answer.bubbleSize} / 2);\n      border-width: 2px;\n      border-style: solid;\n      border-color: #c6c6c6;\n      color: ${colors.answer.label.colorHover};\n      transition: color ${transitions.answer}, border-color ${transitions.answer}, background-color ${transitions.answer};\n      background-color: ${colors.palette.white};\n      font-family: \"Neue Helvetica W01\", Helvetica, Arial, sans-serif;\n    }\n  `,\n  answerColor: (values: { color: string, background: string }) => css`\n    color: ${values.color};\n    .answer-letter {\n       border-color: ${values.color};\n       background-color: ${values.background};\n       color: ${colors.palette.white};\n    }\n  `,\n  answerChecked: () => mixins.answerColor({ color: colors.answer.checked, background: colors.answer.checked }),\n  answerCorrect: () => mixins.answerColor(colors.answer.correct),\n  answerIncorrect: () => mixins.answerColor(colors.answer.incorrect),\n  answerHover: () => css`\n    color: ${colors.answer.label.colorHover};\n    .answer-letter {\n      border-color: ${colors.answer.label.colorSelected};\n    }\n  `,\n  answerCorrectText: () => css`\n    content: 'correct answer';\n    color: ${colors.answer.label.color};\n    margin-left: calc(-1.34 * ${layouts.answer.bubbleSize});\n    display: flex;\n    align-items: center;\n    height: ${layouts.answer.bubbleSize};\n    width: 4.8rem;\n    text-align: center;\n    font-size: 1.2rem;\n    line-height: 1.2rem;\n  `,\n  answerCorrectAnswer: () => css`\n    color: ${colors.answer.correct.color};\n    .answer-letter {\n      border-color: ${colors.answer.correct.color};\n      color: ${colors.answer.correct.color};\n    }\n    &::before {\n     ${mixins.answerCorrectText()}\n      @media screen and (max-width: ${BREAKPOINTS.tablet}px) {\n        display: none;\n      }\n    }\n    @media screen and (max-width:  ${BREAKPOINTS.tablet}px) {\n      .answer-letter-wrapper {\n        display: flex;\n        flex-direction: column;\n        &::after {\n          ${mixins.answerCorrectText()}\n          width: ${layouts.answer.bubbleSize} !important;\n          margin-left: -0.1rem;\n        }\n      }\n    }\n  `,\n  resetText: () => css`\n    font-family:  \"Neue Helvetica W01\", Helvetica, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Arial, \"Noto Sans\", \"Liberation Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";\n    font-style: normal;\n    font-weight: 400;\n    line-height: 1.6;\n    text-align: left;\n    text-align: start;\n    text-decoration: none;\n    text-shadow: none;\n    text-transform: none;\n    letter-spacing: normal;\n    word-break: normal;\n    word-spacing: normal;\n    white-space: normal;\n    line-break: auto;\n  `,\n  stepCardPadding: () => css`\n    padding: 48px 140px;\n\n    ${breakpoints.tablet`\n      padding: ${breakpoints.margins.tablet} ${breakpoints.margins.tablet};\n    `}\n\n    ${breakpoints.mobile`\n      padding: calc(${breakpoints.margins.mobile} * 2) ${breakpoints.margins.mobile};\n    `}\n  `,\n  popover: () => css`\n    ${mixins.resetText()}\n\n    z-index: 1;\n    position: relative;\n    border: ${layouts.popover.borderWidth} solid ${colors.popover.borderColor};\n    background-color: ${colors.palette.white};\n    background-clip: padding-box;\n    max-width: ${layouts.popover.maxWidth};\n    margin: calc(${layouts.popover.arrow.height} - 14px) 0 ${layouts.answer.horizontalSpacing} 8px;\n    box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.1);\n    color: ${colors.palette.neutralThin};\n    font-size: 1.4rem;\n\n    .arrow {\n      position: absolute;\n      display: block;\n      width: ${layouts.popover.arrow.width};\n      height: ${layouts.popover.arrow.height};\n      margin-left: ${layouts.popover.arrow.edgeDistance};\n      top: calc(${layouts.popover.arrow.height} * -1);\n\n      &::before,\n      &::after {\n        position: absolute;\n        display: block;\n        content: \"\";\n        border-color: transparent;\n        border-style: solid;\n        border-width: 0 calc(${layouts.popover.arrow.width} / 2) ${layouts.popover.arrow.height} calc(${layouts.popover.arrow.width} / 2);\n      }\n      &::before {\n        top: 0;\n        border-bottom-color: ${colors.popover.borderColor};\n      }\n      &::after {\n        top: ${layouts.popover.borderWidth};\n        border-bottom-color: ${colors.palette.white};\n      }\n    }\n\n    &.right {\n      right: calc(-${layouts.popover.arrow.edgeDistance} - ${layouts.popover.borderWidth});\n      .arrow { right: ${layouts.popover.arrow.edgeDistance}; }\n    }\n\n\n    > .content {\n      padding: ${layouts.popover.verticalSpacing} ${layouts.popover.horizontalSpacing};\n    }\n  `,\n};\n\nconst theme = {\n  colors: colors,\n  layouts: layouts,\n  transitions: transitions,\n  breakpoints: breakpoints,\n};\n\nexport default theme;\n","import { ReactNode } from \"react\";\nimport { breakpoints, colors, mixins } from \"../theme\";\nimport { AvailablePoints, StepBase, StepWithData } from \"../types\";\nimport styled from \"styled-components\";\nimport cn from \"classnames\";\n\nexport const InnerStepCard = styled.div`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  flex: 1 1 auto;\n  min-height: 400px;\n  border-radius: 0.25rem;\n  margin: 0 auto 5rem auto;\n  border: 1px solid ${colors.palette.light};\n  border-radius: 0.25rem;\n  background-color: white;\n\n  ${breakpoints.desktop`\n    max-width: 1000px;\n  `}\n`;\n\nexport const OuterStepCard = styled.div`\n  padding: 2rem;\n\n  ${breakpoints.mobile`\n    padding: 0;\n  `}\n`;\n\nconst StepCardHeader = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 16px 24px;\n  background: ${colors.card.header.background};\n  font-size: 1.8rem;\n  line-height: 3rem;\n  letter-spacing: -0.72px;\n\n  div {\n    display: flex;\n    align-items: baseline;\n  }\n\n  div.question-info {\n    font-weight: bold;\n\n    .question-id {\n      font-weight: normal;\n    }\n    .ox-icon-lock {\n        margin-right: 1rem;\n    }\n  }\n\n  .num-questions, .points {\n      display: none;\n  }\n\n  .exercise-id, .separator {\n      font-weight: normal;\n  }\n\n  .separator {\n      margin: 0 0.4rem;\n  }\n\n  .exercise-id {\n      height: 28px; // Fix baseline issue\n  }\n\n  button {\n    color: ${colors.palette.gray};\n  }\n\n  .openstax-exercise-badges {\n      margin: 0;\n      line-height: 2rem;\n      svg {\n          display: block;\n          &:not(.interactive) {\n              margin: 0 0 0 6px !important;\n          }\n      }\n  }\n\n  ${breakpoints.desktop`\n      button.ox-icon-angle-left, button.ox-icon-angle-right {\n          display: none;\n      }\n      .separator {\n          display: inherit;\n      }\n  `}\n\n    /*\n    1. Show the arrows to move to previous and next question.\n    2. Show the number of questions.\n    3. Override box-shadow of icons when turned into a button.\n    */\n    ${breakpoints.tablet`\n        font-size: 1.6rem;\n        line-height: 2.5rem;\n\n        svg.ox-icon {\n            display: inherit;\n            margin: 0;\n        }\n        button.ox-icon-angle-left {\n            margin-right: ${breakpoints.margins.tablet};\n        }\n        button.ox-icon-angle-right {\n            margin-left: ${breakpoints.margins.tablet};\n        }\n        .openstax-exercise-badges svg {\n            display: none;\n        }\n        .num-questions, points {\n            display: inherit;\n        }\n\n        .exercise-id {\n            display: none;\n        }\n\n        button[class^='ox-icon-angle']:hover {\n            box-shadow: none;\n        }\n  `}\n\n  ${breakpoints.mobile`\n      font-size: 1.4rem;\n      line-height: 2rem;\n      padding: 10px 8px;\n\n      button.ox-icon-angle-left {\n          margin-right: ${breakpoints.margins.mobile};\n      }\n      button.ox-icon-angle-left {\n          margin-right: ${breakpoints.margins.mobile};\n      }\n  `}\n`;\nStepCardHeader.displayName = 'StepCardHeader';\n\nconst StepCardQuestion = styled.div<{ unpadded?: boolean }>`\n  .step-card-body {\n    ${mixins.stepCardPadding()}\n\n    background: ${colors.card.body.background};\n\n    &.exercise-stimulus {\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n    }\n  }\n\n    & + div .step-card-body {\n        padding-top: 0;\n    }\n\n    &.exercise-context, &.exercise-stimulus, &.exercise-stem {\n        padding-bottom: 0;\n    }\n\n    ${breakpoints.only.mobile`\n        && .question-feedback {\n            margin-left: 0;\n\n           .arrow { margin-left: 12px; }\n        }\n    `}\n\n    .reading-step & {\n        padding: 0;\n    }\n\n    ${breakpoints.desktop`\n        .video-step &, .interactive-step & {\n            .openstax-exercise-badges {\n              margin-right: 3.8rem;\n            }\n        }\n    `}\n\n    ${breakpoints.mobile`\n        .openstax-exercise-badges svg {\n            margin-right: ${breakpoints.margins.mobile};\n        }\n    `}\n\n    &&& {\n        .openstax-has-html .splash .frame-wrapper { margin-top: 0; }\n    }\n`;\n\ninterface SharedProps {\n  questionNumber: number;\n  numberOfQuestions: number;\n  showTotalQuestions: boolean;\n  leftHeaderChildren?: ReactNode;\n  rightHeaderChildren?: ReactNode;\n  headerTitleChildren?: ReactNode;\n}\n\nexport interface StepCardProps extends SharedProps {\n  unpadded: boolean;\n  className?: string;\n  children?: ReactNode;\n  stepType: StepWithData['type'];\n  availablePoints?: AvailablePoints;\n  questionId?: string;\n  multipartBadge?: ReactNode;\n  isHomework: boolean;\n}\n\nconst StepCard = ({\n  questionNumber,\n  numberOfQuestions,\n  showTotalQuestions,\n  stepType,\n  isHomework,\n  availablePoints,\n  unpadded, // currently does nothing; may need to restore if this causes tutor stepcard regression\n  className,\n  children,\n  questionId,\n  multipartBadge,\n  leftHeaderChildren,\n  rightHeaderChildren,\n  headerTitleChildren,\n  ...otherProps }: StepCardProps) => {\n\n  const formattedQuestionNumber = numberOfQuestions > 1\n    ? `Questions ${questionNumber} - ${questionNumber + numberOfQuestions - 1}`\n    : `Question ${questionNumber}`;\n\n  return (\n    <OuterStepCard {...otherProps}>\n      {multipartBadge}\n      <InnerStepCard className={className}>\n        {questionNumber && isHomework && stepType === 'exercise' &&\n          <StepCardHeader>\n            <div>\n              {leftHeaderChildren}\n              <div className=\"question-info\">\n                {headerTitleChildren}\n                <span>{formattedQuestionNumber}</span>\n                {showTotalQuestions ? <span className=\"num-questions\">&nbsp;/ {numberOfQuestions}</span> : null}\n                <span className=\"separator\">|</span>\n                <span className=\"question-id\">ID: {questionId}</span>\n              </div>\n            </div>\n            <div>\n              {availablePoints && <div className=\"points\">{availablePoints} Points</div>}\n              {rightHeaderChildren}\n            </div>\n          </StepCardHeader>\n        }\n        <StepCardQuestion unpadded={unpadded}>{children}</StepCardQuestion>\n      </InnerStepCard>\n    </OuterStepCard>\n  )\n};\nStepCard.displayName = 'OSStepCard';\n\nexport interface TaskStepCardProps extends SharedProps {\n  className?: string;\n  children?: ReactNode;\n  step: StepBase | StepWithData;\n  questionNumber: number;\n  numberOfQuestions: number;\n}\n\nconst TaskStepCard = ({\n  step,\n  questionNumber,\n  numberOfQuestions,\n  children,\n  className,\n  ...otherProps\n}: TaskStepCardProps) =>\n(<StepCard {...otherProps}\n  unpadded={true}\n  questionNumber={questionNumber}\n  numberOfQuestions={numberOfQuestions}\n  stepType={'type' in step ? step.type : 'exercise'}\n  isHomework={'task' in step ? (step.task === undefined || step.task.type === 'homework') : true}\n  data-task-step-id={step.id}\n  availablePoints={step.available_points}\n  className={cn(`${('type' in step ? step.type : 'exercise')}-step`, className)}\n  questionId={step.uid}\n>\n  {children}\n</StepCard>);\n\nTaskStepCard.displayName = 'OSTaskStepCard';\n\nexport { StepCard, TaskStepCard };\n","import { colors, breakpoints, mixins } from \"../theme\";\nimport styled from \"styled-components\";\n\nexport const StepCardFooter = styled.div`\n    ${mixins.stepCardPadding()}\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: space-between;\n    font-size: 1.4rem;\n    line-height: 2rem;\n    background: ${colors.card.body.background};\n\n    > * {\n        flex-grow: 1;\n    }\n\n    button {\n        width: 160px;\n        height: 48px;\n    }\n\n    .step-card-footer-inner {\n        border-top: 1px solid ${colors.palette.pale};\n        padding-top: 32px;\n        display: flex;\n        justify-content: space-between;\n    }\n\n    .points {\n        margin-bottom: 1.6rem; // Replace with https://caniuse.com/?search=gap soon\n\n        .attempts-left {\n            color: #F36B32;\n        }\n    }\n\n    .controls {\n        display: flex;\n        flex-flow: column wrap-reverse;\n        margin-left: 1.6rem; // Replace with https://caniuse.com/?search=gap soon\n\n        button + button {\n            margin: 0.8rem 0 0 0;\n        }\n    }\n\n    ${breakpoints.desktop`\n        padding: 0 140px 32px 140px;\n        flex-wrap: nowrap;\n\n        .points {\n            max-width: 400px;\n        }\n\n        .controls {\n            flex-flow: row;\n            justify-content: flex-end;\n\n            button + button {\n                margin: 0 0 0 0.8rem;\n            }\n        }\n    `}\n`;\n","import { colors } from \"../theme\";\nimport styled from \"styled-components\";\n\nconst StyledButton = styled.button`\n  background-color: ${colors.button.background};\n  color: ${colors.palette.white};\n  font-size: 1.6rem;\n  font-weight: 700;\n  line-height: 2rem;\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n  height: 4rem;\n  padding: 0 3rem;\n  border: 0;\n  border-radius: 5px;\n  box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.2);\n\n  &:not([disabled]) {\n    cursor: pointer;\n    &:hover {\n      background: ${colors.button.backgroundHover}\n    }\n    &:active {\n      background: ${colors.button.backgroundActive}\n    }\n  }\n  &:disabled {\n    opacity: 0.4;\n  }\n`;\n\ninterface ButtonProps extends React.ComponentPropsWithoutRef<'button'> {\n  isWaiting?: never;\n  waitingText?: never;\n}\ninterface WaitingButtonProps extends React.ComponentPropsWithoutRef<'button'> {\n  isWaiting: boolean;\n  waitingText: string;\n}\n\nconst Button = (props: ButtonProps | WaitingButtonProps) => {\n  const { disabled, isWaiting, waitingText, children, ...otherProps } = props;\n\n  return (\n    <StyledButton {...otherProps} disabled={isWaiting || disabled}>{(isWaiting && waitingText) || children}</StyledButton>\n  );\n}\n\nexport default Button;\n","import styled from \"styled-components\";\nimport { InnerStepCard } from \"./Card\";\nimport Button from \"./Button\";\n\nexport interface CompletionStatusProps {\n  numberOfQuestions: number;\n  numberCompleted: number;\n  handleClick: () => void;\n}\n\nconst CompletionStatusCard = styled(InnerStepCard)`\n  padding: 88px 72px;\n  font-size: 1.8rem;\n  line-height: 3rem;\n  display: block;\n\n  button {\n    min-width: 160px;\n    height: 48px;\n  }\n\n  p {\n    margin: 16px 0 20px 0;\n  }\n`;\n\nconst CompletionHeader = styled.h2`\n  font-size: 2.4rem;\n  margin: 0;\n`;\n\nexport const CompletionStatus = ({\n  numberOfQuestions, numberCompleted, handleClick\n}: CompletionStatusProps) => {\n  \n  const allCompleted = numberOfQuestions === numberCompleted;\n  const someCompleted = numberCompleted > 0;\n  const buttonText = allCompleted ? 'Next' : (\n      someCompleted ? 'Continue' : 'Start'\n  );\n\n  return (\n    <CompletionStatusCard>\n      <CompletionHeader>{allCompleted ? 'You are done.' : (someCompleted ? 'Quiz is partially complete.' : 'No questions have been answered.')}</CompletionHeader>\n      <p>{allCompleted ? 'Great job answering all the questions.' : (someCompleted ? `You've completed ${numberCompleted} of ${numberOfQuestions} questions.` : 'Begin working on the quiz.')}</p>\n      <Button data-test-id={`${buttonText.split(' ')[0].toLowerCase()}-btn`} onClick={()=> handleClick()}>\n        {buttonText}\n      </Button>\n    </CompletionStatusCard>\n  )\n};\n","import styled from 'styled-components';\nimport { mixins, colors, layouts, transitions } from '../theme';\nimport { AnswersTable } from './AnswersTable';\nimport classnames from 'classnames';\nimport { ID, ExerciseQuestionData, Task } from 'src/types';\nimport React, { ReactNode } from 'react';\nimport { Content } from './Content';\n\nconst StyledQuestion = styled.div`\n&.step-card-body {\n  ${mixins.stepCardPadding()};\n}\n\n&.openstax-question {\n  border-top: 1px solid ${colors.palette.pale};\n  font-size: 1.8rem;\n\n  .detailed-solution {\n    margin-bottom: 1rem;\n    .header {\n      display: inline;\n      margin-right: 0.5rem;\n      color: #5e6062;\n      font-weight: bold;\n      flex-basis: 0;\n    }\n    .solution {\n      display: inline;\n      color: #6f6f6f;\n    }\n  }\n\n  img {\n    display: block;\n    margin: auto;\n    max-width: 100%;\n  }\n\n  .question-stem {\n    margin-bottom: 0;\n  }\n\n  .answers-table {\n    margin-bottom: 20px;\n    font-size: 1.6rem;\n    line-height: 2rem;\n  }\n\n  .instructions {\n    font-size: 1.4rem;\n    font-style: italic;\n    margin-top: 10px;\n    color: ${colors.palette.neutral};\n    margin: 0;\n\n    i {\n      margin-left: 5px;\n    }\n\n    .text-info {\n      color: ${colors.palette.neutralLightBlue};\n      padding-left: 5px;\n      cursor: pointer;\n      font-style: normal;\n    }\n  }\n\n  .multiple-choice-prompt {\n    font-weight: 600;\n  }\n\n  .free-response {\n    padding: ${layouts.answer.horizontalSpacing} ${layouts.answer.horizontalBuffer};\n    margin: ${layouts.answer.verticalSpacing} 0 ${layouts.answer.horizontalSpacing} ${layouts.answer.verticalSpacing};\n    border-left: ${layouts.answer.horizontalSpacing} solid ${colors.palette.neutralLighter};\n    font-style: italic;\n  }\n\n  &:not(.openstax-question-preview) {\n    .answers-answer {\n      width: initial;\n      &:not(.disabled){\n        .answer-label:focus{\n          background-color: ${colors.palette.neutralLightest};\n        }\n      }\n      ${mixins.answer()};\n    }\n\n    .answer-answer {\n      flex: 1;\n      display: flex;\n      align-items: center;\n      margin-left: ${layouts.answer.horizontalSpacing};\n      * {\n        margin: 0;\n      }\n    }\n\n    .answers-answer.answer-correct .answer-answer {\n      align-items: flex-start;\n      margin-top: calc((${layouts.answer.bubbleSize} / 2) - 1rem);\n    }\n\n    .answer-letter {\n      text-align: center;\n      padding: 0;\n      font-size: 1.6rem;\n      display: flex;\n      justify-content: center;\n      align-items: center;\n    }\n\n    .answer-label {\n      font-weight: normal;\n      width: 100%;\n      padding: ${layouts.answer.verticalSpacing} 0 0 0;\n      margin: 0;\n\n      transition: color ${transitions.answer};\n    }\n\n    // a selectable answer\n    .answer-input-box:not([disabled]) ~ .answer-label {\n      cursor: pointer;\n\n      &:hover {\n        ${mixins.answerHover()}\n      }\n    }\n\n    // a selected answer\n    &:not(.has-correct-answer) {\n      .answer-input-box {\n        display: none;\n\n        &:checked {\n          + .answer-label,\n          + .answer-label:hover {\n            ${mixins.answerChecked()};\n          }\n        }\n      }\n\n      .answer-checked{\n        .answer-label {\n          ${mixins.answerChecked()};\n        }\n      }\n    }\n\n    // answer that has been checked\n    &.has-correct-answer {\n      .answer-checked {\n        &:not(.answer-correct) {\n          .answer-label {\n            ${mixins.answerIncorrect()};\n          }\n        }\n\n        &.answer-correct {\n          .answer-label {\n            ${mixins.answerCorrect()};\n          }\n        }\n      }\n\n      .answer-correct:not(.answer-checked) {\n        .answer-label {\n          ${mixins.answerCorrectAnswer()}\n        }\n      }\n    }\n\n    &.has-incorrect-answer {\n      .answer-incorrect, .answer-checked.answer-incorrect {\n        .answer-label {\n          ${mixins.answerIncorrect()}\n        }\n      }\n    }\n\n    .question-feedback {\n      ${mixins.popover()}\n      max-width: ${layouts.answer.feedback.popover.maxWidth};\n      .question-feedback-content {\n        padding: ${layouts.answer.feedback.popover.verticalSpacing} ${layouts.answer.feedback.popover.horizontalSpacing};\n      }\n    }\n  }\n\n  .openstax-answer {\n    border-top: 1px solid #d5d5d5;\n    margin: 10px 0;\n    padding: 6px 8px;\n  }\n}\n`;\n\nexport interface QuestionProps {\n  question: ExerciseQuestionData,\n  answer_id?: ID;\n  task?: Task | null,\n  correct_answer_id: ID | null;\n  incorrectAnswerId: ID;\n  hideAnswers: boolean;\n  hidePreambles?: boolean,\n  exercise_uid?: string;\n  displayFormats: boolean,\n  className: string;\n  questionNumber: number;\n  displaySolution: boolean;\n  context?: string;\n  correct_answer_feedback_html?: string;\n  contentRenderer?: JSX.Element;\n  feedback_html: string;\n  onChange: () => void;\n  show_all_feedback?: boolean;\n  tableFeedbackEnabled?: boolean;\n  children?: ReactNode;\n  answerIdOrder?: ID[];\n  choicesEnabled?: boolean;\n}\n\nexport const Question = React.forwardRef((props: QuestionProps, ref: React.ForwardedRef<HTMLDivElement>) => {\n  let exerciseUid, solution;\n\n  const {\n    question, correct_answer_id, incorrectAnswerId, exercise_uid, className, questionNumber, context, task, hidePreambles\n  } = props;\n\n  const { stem_html, collaborator_solutions = [], formats, stimulus_html } = question;\n\n  const hasCorrectAnswer = !!correct_answer_id;\n  const hasIncorrectAnswer = !!incorrectAnswerId;\n\n  const taskIsDeleted = (task != null ? task.is_deleted : undefined)\n  const taskIsHomework = ((task != null ? task.type : undefined) === 'homework');\n\n  const classes = classnames('openstax-question', className, {\n    'has-correct-answer': hasCorrectAnswer && !(taskIsDeleted && taskIsHomework),\n    'has-incorrect-answer': hasIncorrectAnswer,\n  });\n\n  const hasSolution = () => {\n    const { displaySolution } = props;\n    const { collaborator_solutions = [] } = question;\n\n    return (\n      displaySolution &&\n      collaborator_solutions &&\n      collaborator_solutions.find(s => s['content_html'] !== undefined)\n    );\n  };\n\n  if (exercise_uid != null) {\n    exerciseUid = (\n      <div className=\"exercise-uid\">\n        {exercise_uid}\n      </div>\n    );\n  }\n\n  if (hasSolution()) {\n    solution =\n      <div className=\"detailed-solution\">\n        <div className=\"header\">\n          Detailed solution:\n        </div>\n        <Content\n          className=\"solution\"\n          block={true}\n          html={collaborator_solutions.map(s => s['content_html']).join('')} />\n      </div>;\n  }\n\n  return (\n    <StyledQuestion ref={ref} className={classes} data-question-number={questionNumber} data-test-id=\"question\">\n      <QuestionHtml type=\"context\" html={context} hidden={hidePreambles} />\n      <QuestionHtml type=\"stimulus\" html={stimulus_html} hidden={hidePreambles} />\n      <QuestionHtml type=\"stem\" html={stem_html} hidden={hidePreambles} questionNumber={questionNumber} />\n      {props.children}\n\n      <AnswersTable\n        {...props}\n        onChangeAnswer={props.onChange}\n        hasCorrectAnswer={hasCorrectAnswer} />\n\n      {solution}\n      {props.displayFormats ? <FormatsListing formats={formats} /> : undefined}\n      {exerciseUid}\n    </StyledQuestion>\n  );\n});\n\ninterface QuestionHtmlProps {\n  html?: string;\n  type: string;\n  hidden: QuestionProps['hidePreambles'];\n  questionNumber?: QuestionProps['questionNumber'];\n}\n\nexport const QuestionHtml = (props: QuestionHtmlProps) => {\n  const { html = '', type, hidden, questionNumber } = props;\n  if (hidden === true || !(html.length > 0)) { return null; }\n\n  return (\n    <Content\n      html={html}\n      data-question-number={questionNumber}\n      className={`question-${type}`}\n      block={true}\n    />\n  );\n};\n\nconst FormatsListing = ({ formats = [] }: { formats: ExerciseQuestionData['formats'] }) => {\n  return (\n    <div className=\"formats-listing\">\n      <div className=\"header\">Formats:</div>\n      {formats.map((format, i) => <span key={i}>{format}</span>)}\n    </div>\n  );\n};\n","import { MouseEventHandler, ReactNode } from 'react';\nimport { countWords } from '../utils';\nimport styled, { css } from 'styled-components';\nimport { colors, mixins } from '../theme';\nimport { AvailablePoints, ExerciseQuestionData } from 'src/types';\nimport { QuestionHtml } from './Question';\nimport Button from './Button';\nimport { StepCardFooter } from './StepCardFooter';\n\nexport interface FreeResponseProps {\n  readOnly: boolean;\n  wordLimit: number;\n  infoRowChildren?: ReactNode;\n  pointsChildren?: ReactNode;\n  onChange: (event: React.ChangeEvent<HTMLTextAreaElement>) => void;\n  cancelHandler: MouseEventHandler<HTMLButtonElement>;\n  saveHandler: MouseEventHandler<HTMLButtonElement>;\n  defaultValue: string;\n  isSubmitDisabled: boolean;\n  questionNumber: number,\n  question: ExerciseQuestionData,\n  availablePoints: AvailablePoints,\n  textHasChanged: boolean;\n  submitBtnLabel: string;\n}\n\nconst TextAreaErrorStyle = css`\n  background-color: #f5e9ea;\n`;\n\nconst StyledFreeResponse = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  .step-card-body {\n    ${mixins.stepCardPadding()}\n  }\n`;\n\nconst SyledQuestionStem = styled.div`\n  font-size: 2rem;\n  line-height: 1.68em;\n  position: relative;\n`;\n\nconst InfoRow = styled.div<{ hasChildren: boolean }>`\n  margin: 8px 0;\n  display: flex;\n  justify-content: ${props => props.hasChildren ? 'space-between' : 'flex-end'};\n  line-height: 1.6rem;\n\n  .word-limit-error-info {\n    color: ${colors.palette.danger};\n  }\n\n  div > span {\n    font-size: 12px;\n    line-height: 16px;\n\n    + span {\n      margin-left: 1rem;\n    }\n  }\n\n  .last-submitted + * {\n    margin-top: 0.8rem;\n  }\n\n  color: ${colors.palette.neutralThin};\n`;\n\nexport const FreeResponseTextArea = styled.textarea<{ isOverWordLimit: boolean } & FreeResponseProps>`\n  display: block;\n  font-family: inherit;\n  font-size: 1.8rem;\n  line-height: 3rem;\n  width: 100%;\n  min-height: 10.5em;\n  line-height: 1.5em;\n  margin: 2.5rem 0 0 0;\n  padding: 0.5em;\n  border: 1px solid ${colors.palette.neutral};\n  color: ${colors.palette.neutralDark};\n  ${props => props.isOverWordLimit && TextAreaErrorStyle};\n  ${props => props.isOverWordLimit && css`\n    border: 2px solid ${colors.palette.danger};\n  `}\n  background-color: ${props => props.readOnly && colors.palette.neutralCool};\n`;\nFreeResponseTextArea.displayName = 'OSFreeResponseTextArea';\n\nconst RevertButton = (props: {\n  disabled: boolean\n} & React.ComponentPropsWithoutRef<'button'>) => (\n  <Button {...props}>\n    Cancel\n  </Button>\n);\n\n\nexport const FreeResponseInput = (props: FreeResponseProps) => {\n  const {\n    availablePoints,\n    cancelHandler,\n    defaultValue,\n    infoRowChildren,\n    isSubmitDisabled,\n    pointsChildren,\n    question,\n    questionNumber,\n    saveHandler,\n    submitBtnLabel,\n    textHasChanged,\n    wordLimit,\n  } = props;\n\n  const isOverWordLimit = countWords(defaultValue) > wordLimit;\n\n  const questionProps = {};\n  if (questionNumber) { questionProps['data-question-number'] = questionNumber; }\n\n  return (\n    <StyledFreeResponse data-test-id=\"student-free-response\">\n      <div className=\"step-card-body\">\n        <SyledQuestionStem {...questionProps}>\n          {question.stem_html &&\n            <QuestionHtml type=\"stem\" html={question.stem_html} hidden={false} />}\n        </SyledQuestionStem>\n        <FreeResponseTextArea\n          {...props}\n          isOverWordLimit={isOverWordLimit}\n          data-test-id=\"free-response-box\"\n          placeholder=\"Enter your response...\"\n          aria-label=\"question response text box\"\n        />\n        <InfoRow hasChildren={!!infoRowChildren}>\n          {infoRowChildren}\n          <div>\n            <span>{countWords(defaultValue)} words</span>\n            {isOverWordLimit && <span className=\"word-limit-error-info\">Maximum {wordLimit} words</span>}\n          </div>\n        </InfoRow>\n      </div>\n      <StepCardFooter>\n        <div className=\"points\">\n          <strong>Points: {availablePoints}</strong>\n          {pointsChildren}\n        </div>\n        <div className=\"controls\">\n          <RevertButton disabled={!textHasChanged} onClick={cancelHandler} />\n          <Button\n            data-test-id=\"submit-answer-btn\"\n            disabled={isSubmitDisabled || isOverWordLimit}\n            onClick={saveHandler}\n          >\n            {submitBtnLabel}\n          </Button>\n        </div>\n      </StepCardFooter>\n    </StyledFreeResponse>\n  );\n}\n\nFreeResponseInput.displayName = 'OSFreeResponse';\n","import styled from 'styled-components';\nimport { colors, mixins } from '../../src/theme';\nimport { ExerciseData } from '../../src/types';\nimport { faBookOpen } from '@fortawesome/free-solid-svg-icons/faBookOpen';\nimport { faTriangleExclamation } from '@fortawesome/free-solid-svg-icons/faTriangleExclamation';\nimport { faCircleInfo } from '@fortawesome/free-solid-svg-icons/faCircleInfo';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\ntype ExplanationType = 'multiple-choice' | 'two-step';\n\nconst TypeExplanations: { [key in ExplanationType]: string } = {\n  'multiple-choice': 'Select the best answer from the given list of distractors. Your instructor may or may not allow multiple attempts.',\n  'two-step': 'In a two-step question, OpenStax asks for your own answer first, then gives multiple-choice options to help you assess your learnings. \\\nRecalling the answer to a question from memory helps you to retain things longer.',\n}\n\nconst ItemWrapper = styled.div`\n  padding: 0.6rem 0.9rem;\n  .popover { display: none; }\n  &:hover {\n    svg path { fill: ${colors.palette.mediumBlue};}\n    .popover { display: flex; }\n  }\n`;\n\nconst InnerWrapper = styled.div`\n  position: relative;\n  display: flex;\n`;\n\nconst Popover = styled.div`\n  ${mixins.popover}\n  top: 3rem;\n  width: 20rem;\n  position: absolute;\n  font-size: 1.2rem;\n  line-height: 1.8rem;\n`;\n\ninterface PopoverItemProps {\n  text: string;\n  children: JSX.Element;\n  wrapperProps?: {\n    as: keyof JSX.IntrinsicElements;\n    href?: string;\n    target?: string;\n  }\n}\n\nconst PopoverItem = (props: PopoverItemProps) => (\n  <ItemWrapper {...props.wrapperProps}>\n    <InnerWrapper>\n      {props.children}\n      <Popover className=\"popover right\">\n        <div className=\"arrow\"></div>\n        <div className=\"content\">{props.text}</div>\n      </Popover>\n    </InnerWrapper>\n  </ItemWrapper>\n);\n\nconst PopoverItemsWrapper = styled.div`\n  max-width: 200px;\n  display: flex;\n  justify-content: space-between;\n`;\n\nconst StyledFontAwesomeIcon = styled(FontAwesomeIcon)`\n  color: ${colors.palette.darkGray};\n  height: 1em;\n`;\n\nexport const ExerciseIcons = ({ exercise, topicUrl, errataUrl }:\n  { exercise: ExerciseData, topicUrl?: string, errataUrl?: string }) => {\n  const items = [];\n  const isMultipleChoice = exercise.questions.every((q) => q.answers.length > 0);\n  let typeExplanation;\n\n  if (isMultipleChoice && exercise.questions.find((q) => q.formats.includes('free-response'))) {\n    typeExplanation = TypeExplanations['two-step'];\n  } else if (isMultipleChoice) {\n    typeExplanation = TypeExplanations['multiple-choice'];\n  }\n\n  if (topicUrl) {\n    items.push(\n      <PopoverItem key='topic' text='View topic in textbook' wrapperProps={{ as: 'a', href: topicUrl, target: '_blank' }}>\n        <StyledFontAwesomeIcon icon={faBookOpen}></StyledFontAwesomeIcon>\n      </PopoverItem>\n    );\n  }\n\n  items.push(\n    <PopoverItem key='errata' text='Suggest a correction' wrapperProps={{ as: 'a', href: errataUrl, target: '_blank' }}>\n      <StyledFontAwesomeIcon icon={faTriangleExclamation}></StyledFontAwesomeIcon>\n    </PopoverItem>\n  )\n\n  if (typeExplanation) {\n    items.push(\n      <PopoverItem key='type' text={typeExplanation}>\n        <StyledFontAwesomeIcon icon={faCircleInfo} height='16px' width='16px'></StyledFontAwesomeIcon>\n      </PopoverItem>\n    )\n  }\n\n  return (\n    <PopoverItemsWrapper>\n      {items}\n    </PopoverItemsWrapper>\n  );\n};\n","import React from \"react\";\nimport { numberfyId } from \"../../src/utils\";\nimport { AvailablePoints, ID, ExerciseQuestionData, Task } from \"../types\";\nimport Button from \"./Button\";\nimport { Content } from \"./Content\";\nimport { ExerciseBaseProps } from \"./Exercise\";\nimport { Question } from './Question';\nimport { StepCardFooter } from \"./StepCardFooter\";\n\nexport interface ExerciseQuestionProps {\n  task?: Task;\n  question: ExerciseQuestionData;\n  answer_id_order?: ID[];\n  questionNumber: number;\n  choicesEnabled: boolean;\n  hasMultipleAttempts: boolean;\n  onAnswerChange: () => void;\n  onAnswerSave: ExerciseBaseProps['onAnswerSave'];\n  onNextStep: ExerciseBaseProps['onNextStep'];\n  feedback_html: string;\n  correct_answer_feedback_html: string;\n  is_completed: boolean;\n  correct_answer_id: ID;\n  incorrectAnswerId: ID;\n  answer_id?: ID;\n  attempts_remaining: number;\n  published_comments?: string;\n  detailedSolution?: string;\n  canAnswer: boolean;\n  needsSaved: boolean;\n  canUpdateCurrentStep: boolean;\n  attempt_number: number;\n  apiIsPending: boolean;\n  displaySolution: boolean;\n  available_points: AvailablePoints;\n  exercise_uid: string;\n  free_response?: string;\n  show_all_feedback?: boolean;\n  tableFeedbackEnabled?: boolean;\n}\n\nconst AttemptsRemaining = ({ count }: { count: number }) => {\n  return (\n    <div>{count} attempt{count === 1 ? '' : 's'} left</div>\n  );\n}\n\nconst PublishedComments = ({ published_comments }: { published_comments?: string }) => {\n  if (!published_comments) { return null; }\n\n  return (\n    <div>\n      <strong>Feedback:</strong> {published_comments}\n    </div>\n  );\n}\n\nexport const SaveButton = (props: {\n  disabled: boolean, isWaiting: boolean, attempt_number: number\n} & React.ComponentPropsWithoutRef<'button'>) => (\n  <Button\n    {...props}\n    waitingText=\"Saving…\"\n    isWaiting={props.isWaiting}\n    data-test-id=\"submit-answer-btn\"\n  >\n    {props.attempt_number == 0 ? 'Submit' : 'Re-submit'}\n  </Button>\n);\n\nexport const NextButton = (props: {\n  canUpdateCurrentStep: boolean,\n} & React.ComponentPropsWithoutRef<'button'>) => {\n  return (\n    <Button {...props} data-test-id=\"continue-btn\">\n      {props.canUpdateCurrentStep ? 'Continue' : 'Next'}\n    </Button>\n  );\n}\n\nconst FreeResponseReview = ({ free_response }: Pick<ExerciseQuestionProps, \"free_response\">) => {\n  if (!free_response) { return null; }\n  return (\n    <>\n      <div className=\"free-response\">{free_response}</div>\n    </>\n  );\n}\n\nexport const ExerciseQuestion = React.forwardRef((props: ExerciseQuestionProps, ref: React.ForwardedRef<HTMLDivElement>) => {\n  const {\n    question, task, answer_id_order, onAnswerChange, feedback_html, correct_answer_feedback_html,\n    is_completed, correct_answer_id, incorrectAnswerId, choicesEnabled, questionNumber,\n    answer_id, hasMultipleAttempts, attempts_remaining, published_comments, detailedSolution,\n    canAnswer, needsSaved, attempt_number, apiIsPending, onAnswerSave, onNextStep, canUpdateCurrentStep,\n    displaySolution, available_points, free_response, show_all_feedback, tableFeedbackEnabled\n  } = props;\n\n  return (\n    <div data-test-id=\"student-exercise-question\">\n      <Question\n        ref={ref}\n        task={task}\n        question={question}\n        answerIdOrder={answer_id_order}\n        choicesEnabled={choicesEnabled}\n        answer_id={answer_id}\n        questionNumber={questionNumber}\n        onChange={onAnswerChange}\n        feedback_html={feedback_html}\n        correct_answer_feedback_html={correct_answer_feedback_html}\n        correct_answer_id={is_completed ? correct_answer_id : null}\n        incorrectAnswerId={incorrectAnswerId}\n        className=\"step-card-body\"\n        hideAnswers={false}\n        displayFormats={false}\n        displaySolution={displaySolution}\n        show_all_feedback={show_all_feedback}\n        tableFeedbackEnabled={tableFeedbackEnabled}\n      >\n        <FreeResponseReview free_response={free_response} />\n      </Question>\n      <StepCardFooter className=\"step-card-footer\">\n        <div className=\"step-card-footer-inner\">\n          <div className=\"points\">\n            <strong>Points: {available_points}</strong>\n            <span className=\"attempts-left\">\n              {hasMultipleAttempts &&\n                attempts_remaining > 0 &&\n                <AttemptsRemaining count={attempts_remaining} />}\n            </span>\n            <PublishedComments published_comments={published_comments} />\n            {detailedSolution && (<div><strong>Detailed solution:</strong> <Content html={detailedSolution} /></div>)}\n          </div>\n          <div className=\"controls\">\n            {canAnswer && needsSaved ?\n              <SaveButton\n                disabled={apiIsPending || !answer_id}\n                isWaiting={apiIsPending}\n                attempt_number={attempt_number}\n                onClick={() => onAnswerSave(numberfyId(question.id))}\n              /> :\n              <NextButton onClick={() => onNextStep(questionNumber - 1)} canUpdateCurrentStep={canUpdateCurrentStep} />}\n          </div>\n        </div>\n      </StepCardFooter>\n    </div>\n  );\n})\n","import React from 'react';\nimport scrollToElement from 'scroll-to-element';\nimport styled from 'styled-components';\nimport { Answer, ExerciseData, ID, QuestionState, StepBase, StepWithData } from '../../src/types';\nimport { TaskStepCard } from './Card';\nimport { Content } from './Content';\nimport { ExerciseIcons } from './ExerciseIcons';\nimport { ExerciseQuestion } from './ExerciseQuestion';\n\nconst StyledTaskStepCard = styled(TaskStepCard)`\n  font-size: 1.8rem;\n  line-height: 2.8rem;\n`;\n\nconst Preamble = ({ exercise }: { exercise: ExerciseData }) => {\n  return (\n    <>\n      {exercise.context &&\n        <Content className=\"step-card-body exercise-context\"\n          block html={exercise.context} />}\n\n      {exercise.stimulus_html &&\n        <Content className=\"step-card-body exercise-stimulus\"\n          block html={exercise.stimulus_html} />}\n    </>\n  );\n};\n\nexport interface ExerciseBaseProps {\n  /** An object containing a Step ID and Exercise UID */\n  step: StepBase;\n  /** An exercise object from the Exercises API */\n  exercise: ExerciseData;\n  numberOfQuestions: number;\n  /** The current question index. For multipart questions this is the first question number.  */\n  questionNumber: number;\n  /** A boolean that enables showing the amount of attempts remaining. */\n  hasMultipleAttempts: boolean;\n  /** A callback with the question_id when the Submit/Re-submit button is clicked. */\n  onAnswerSave: (question_id: number) => void;\n  /** A callback with the current question index when the Next/Continue button is clicked. */\n  onNextStep: (currentIndex: number) => void;\n  /** A boolean that enables always showing every answer feedback_html field. */\n  show_all_feedback?: boolean;\n  /** The question number to scroll into view when the component renders. */\n  scrollToQuestion?: number;\n  /** A boolean that enables showing exercise icons in the card header:\n   * - An info icon describing the exercise type (multiple-choice, two-step, etc.)\n   * - A topic icon linking to the relevant textbook location\n   * - An errata icon linking to the errata/feedback form\n   */\n  showExerciseIcons?: boolean;\n  /** A URL for textbook content relevant to the exercise. */\n  topicUrl?: string;\n  /** A URL for the errata form. */\n  errataUrl?: string;\n}\n\nexport interface ExerciseWithStepDataProps extends ExerciseBaseProps {\n  /** A Tutor Step object */\n  step: StepWithData;\n  canAnswer: boolean;\n  needsSaved: boolean;\n  apiIsPending: boolean;\n  onAnswerChange: (answer: Answer) => void;\n  canUpdateCurrentStep: boolean;\n  answer_id_order?: ID[];\n}\n\nexport interface ExerciseWithQuestionStatesProps extends ExerciseBaseProps {\n  questionStates: { [key: ID]: QuestionState };\n  /** A callback with the IDs of the answer and question */\n  onAnswerChange: (answer: Omit<Answer, 'id'> & { id: number, question_id: number }) => void;\n}\n\nexport const Exercise = ({\n  numberOfQuestions, questionNumber, step, exercise, show_all_feedback, scrollToQuestion, ...props\n}: ExerciseWithStepDataProps | ExerciseWithQuestionStatesProps) => {\n  const legacyStepRender = 'feedback_html' in step;\n  const questionsRef = React.useRef<Array<HTMLDivElement>>([]);\n\n  React.useEffect(() => {\n    const el = scrollToQuestion && questionsRef.current[scrollToQuestion];\n    if (el) {\n      scrollToElement(el);\n    }\n  }, [scrollToQuestion, exercise]);\n\n  return (<StyledTaskStepCard\n    step={step}\n    questionNumber={questionNumber}\n    numberOfQuestions={legacyStepRender ? numberOfQuestions : exercise.questions.length}\n    rightHeaderChildren={props.showExerciseIcons ?\n      <ExerciseIcons exercise={exercise} topicUrl={props.topicUrl} errataUrl={props.errataUrl} /> : null}\n    showTotalQuestions={legacyStepRender}\n  >\n    <Preamble exercise={exercise} />\n\n    {exercise.questions.map((q, i) => {\n      const state = { ...(legacyStepRender ? step : props['questionStates'][q.id]) };\n      return (\n        <ExerciseQuestion\n          {...props}\n          {...state}\n          ref={(el: HTMLDivElement) => questionsRef.current[questionNumber + i] = el}\n          exercise_uid={exercise.uid}\n          key={q.id}\n          question={q}\n          questionNumber={questionNumber + i}\n          choicesEnabled={state.canAnswer}\n          displaySolution={true}\n          detailedSolution={state.solution?.content_html}\n          show_all_feedback={show_all_feedback}\n          tableFeedbackEnabled={show_all_feedback && !legacyStepRender}\n          canUpdateCurrentStep={\n            // misleading prop name, we want to show a continue button for completed questions\n            // that aren't the last question, which requires this prop to be true\n            'canUpdateCurrentStep' in props ?\n              props.canUpdateCurrentStep : !(i + 1 === exercise.questions.length)\n          }\n        />\n      )\n    }\n    )}\n  </StyledTaskStepCard>\n  )\n};\n","const SvgComponent = () => (\n  <svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n  <path d=\"M14.556 2.09149C15.2296 1.78355 16 2.26721 16 2.99824V10.5951C16 10.9241 15.8362 11.2328 15.5605 11.4188C14.4229 12.1864 13.2007 12.6956 11.6715 12.6956C9.53267 12.6956 8.12768 11.6087 6.42651 11.6087C4.81213 11.6087 3.69241 11.923 2.79365 12.3V15.25C2.79365 15.6642 2.45254 16 2.03175 16H1.52381C1.10302 16 0.761905 15.6642 0.761905 15.25V3.18577C0.301492 2.86952 0 2.34455 0 1.74999C0 0.75924 0.836349 -0.0391985 1.852 0.00148899C2.75575 0.0376765 3.49578 0.75049 3.55203 1.63912C3.56854 1.8998 3.52632 2.1488 3.43819 2.37543C4.09648 2.13699 4.80613 1.99999 5.59835 1.99999C7.73718 1.99999 9.14216 3.08696 10.8433 3.08696C12.1289 3.08696 13.4659 2.5899 14.556 2.09149ZM2.79365 4.20718V6.40999C3.71429 6.07656 4.41841 5.85281 5.13016 5.75656V3.51999C4.38413 3.5878 3.84635 3.82593 2.79365 4.20718ZM9.80317 4.49437C8.96454 4.34837 8.21949 4.05752 7.46667 3.82749V5.93437C8.23413 6.14393 8.9767 6.44824 9.80317 6.63156V4.49437ZM5.13016 5.75656V7.94531C6.1713 7.85224 6.84159 7.92546 7.46667 8.06406V5.93437C6.66517 5.71452 5.98791 5.6399 5.13016 5.75656ZM7.46667 10.2012C8.30279 10.3466 9.04546 10.6365 9.80317 10.8681V8.76156C9.03248 8.55074 8.29397 8.24749 7.46667 8.06406V10.2012ZM2.79365 10.6906C3.54349 10.4284 4.31079 10.2581 5.13016 10.1731V7.94531C4.30127 8.01874 3.62667 8.19656 2.79365 8.48781V10.6906ZM14.4762 3.76562C13.8 4.04218 12.9971 4.31687 12.1397 4.4678V6.71499C13.0067 6.57874 13.7279 6.27437 14.4762 5.96843V3.76562ZM14.4762 10.3269V8.12406C13.7717 8.56781 12.9276 8.83062 12.1397 8.93718V11.1741C12.9356 11.0997 13.679 10.8291 14.4762 10.3269ZM9.80317 6.63156V8.76156C10.6179 8.9845 11.283 9.05349 12.1397 8.93718V6.71499C11.3143 6.84584 10.5542 6.79862 9.80317 6.63156Z\" fill=\"currentColor\"/>\n  </svg>\n);\nexport default SvgComponent;\n","import styled, { css } from 'styled-components';\nimport { colors, breakpoints } from '../theme';\nimport FlagIcon from '../assets/flag';\n\nconst ProgressBarWrapper = styled.div`\n  display: flex;\n  justify-content: flex-start;\n  flex-wrap: wrap;\n  padding: 2rem;\n  ${breakpoints.mobile`\n    padding: 0;\n  `}\n`;\n\nconst StyledItemWrapper = styled.span`\n  display: flex;\n  align-items: center;\n  margin-bottom: 1rem;\n\n  &::after {\n    content: \"\";\n    display: block;\n    height: 0.1rem;\n    width: 1rem;\n    background-color: ${colors.palette.pale};\n  }\n\n  &:last-child {\n    &::after {\n      content: none;\n    }\n  }\n\n  ${breakpoints.mobile`\n    &::after {\n      width: 3.3rem;\n    }\n  `}\n`;\n\nconst handleVariant = (variant: ProgressBarItemVariant, isActive: boolean) => {\n  switch (variant) {\n    case 'isStatus':\n      return css`\n        color: ${isActive ? colors.palette.white : colors.palette.darkGray};\n        background-color: ${isActive ? colors.palette.darkGray : colors.palette.neutralLight};\n        border: none;\n        box-shadow: ${isActive ? '0px 0px 2px rgba(0, 0, 0, 0.4), 0px 0px 6px rgba(0, 0, 0, 0.2)' : 'none'};\n      `;\n    case 'isCorrect':\n      return css`\n        color: ${colors.palette.white};\n        background-color: rgba(99, 165, 36, 0.6);\n        border-color: ${colors.palette.darkGreen};\n        box-shadow: ${isActive ? '0 0 6px rgba(0, 0, 0, 0.4)' : 'none'};\n      `;\n    case 'isIncorrect':\n      return css`\n        color: ${colors.palette.white};\n        background-color: ${colors.palette.lightRed};\n        border-color: ${colors.palette.darkRed};\n        box-shadow: ${isActive ? '0 0 6px rgba(0, 0, 0, 0.4)' : 'none'};\n      `;\n    default:\n      return css`\n        color: ${colors.palette.darkGray};\n        background-color: ${isActive ? colors.palette.white : colors.palette.neutralLight};\n        border-color: ${isActive ? colors.palette.darkGray : colors.palette.neutralLight};\n        box-shadow: ${isActive ? '0 0 6px rgba(0, 0, 0, 0.4)' : 'none'};\n      `;\n  }\n};\n\nexport const StyledItem = styled.button<{ variant: ProgressBarItemVariant, isActive: boolean }>`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 2.4rem;\n  height: 2.4rem;\n  border-radius: 50%;\n  border-width: 1px;\n  border-style: solid;\n  margin: 0 0.3rem;\n  font-size: 1.4rem;\n  font-weight: bold;\n  cursor: pointer;\n  ${props => handleVariant(props.variant, props.isActive)}\n`;\n\nexport interface ProgressBarProps<S extends {variant: ProgressBarItemVariant}> {\n  steps: S[];\n  activeIndex: number | null;\n  goToStep: (index: number, step: S) => void;\n}\n\nexport interface ProgressBarItemProps<S> {\n  index: number;\n  isActive: boolean;\n  step: S;\n  goToStep: (index: number, step: S) => void;\n}\n\nexport type ProgressBarItemVariant = 'isCorrect' | 'isIncorrect' | 'isStatus' | null;\n\nexport const ProgressBarItem = <S extends {variant: ProgressBarItemVariant}>({index, isActive, step, goToStep}: ProgressBarItemProps<S>) =>\n  <StyledItemWrapper>\n    <StyledItem variant={step.variant} isActive={isActive} onClick={() => goToStep(index, step)}>\n      {step.variant === 'isStatus' ? <FlagIcon /> : index + 1}\n    </StyledItem>\n  </StyledItemWrapper>;\n\nexport const ProgressBar = <S extends {variant: ProgressBarItemVariant}>({ steps, activeIndex, goToStep }: ProgressBarProps<S>) => <ProgressBarWrapper>\n  {steps.map((step, index) => <ProgressBarItem\n    key={index}\n    index={index}\n    isActive={index === activeIndex}\n    step={step}\n    goToStep={goToStep}\n  />)}\n</ProgressBarWrapper>;\n\n","import { BulletList } from \"react-content-loader\";\nimport { colors } from \"../../src/theme\";\nimport styled from \"styled-components\";\n\nconst Wrapper = styled.div`\n  max-width: 1000px;\n  @media(min-width: 960px) {\n    // Around the height of a multiple choice with 4 options\n    min-height: 53.8rem;\n  }\n  padding: 2rem;\n  margin: 2rem;\n  border: 1px solid ${colors.palette.light};\n  border-radius: 0.25rem;\n  background-color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  > svg {\n    max-width: 600px;\n    flex-grow: 1;\n  }\n`;\n\nexport const Loader = () => <Wrapper><BulletList uniqueKey=\"OSLoader\" /></Wrapper>;\n"],"names":["ALPHABET","answer","incorrectAnswerId","id","countWords","text","words","trim","match","length","_ref","html","component","block","_ref$block","props","undefined","React","cloneElement","_jsx","_extends","dangerouslySetInnerHTML","__html","SimpleFeedback","children","Content","contentRenderer","className","classnames","Feedback","wrapperClasses","position","_jsxs","Answer","body","feedback","selectedCount","onChangeAnswer","radioBox","type","iter","disabled","onKeyPress","qid","correctAnswerId","hasCorrectAnswer","answered_count","show_all_feedback","tableFeedbackEnabled","isChecked","chosenAnswer","find","a","isAnswerChecked","isCorrect","correctness","isAnswerCorrect","isIncorrect","isAnswerIncorrect","correctIncorrectIcon","cn","ariaLabel","checked","name","onChange","feedback_html","percent","selected_count","Math","round","green","red","content_html","_Fragment","htmlFor","onClick","role","classes","displayName","AnswersTable","idCounter","question","correct_answer_id","correct_answer_feedback_html","_props$show_all_feedb","answerIdOrder","instructions","hideAnswers","idOrder","questionAnswerProps","answer_id","defaultAnswerType","choicesEnabled","answersHtml","answers","slice","sort","b","indexOf","map","i","additionalProps","question_id","parseInt","key","answerProps","Object","assign","push","index","forEach","item","spliceIndex","splice","palette","danger","darkRed","lightRed","lightGreen","darkGreen","paleYellow","teal","blue","mediumBlue","lightBlue","neutralLightBlue","tangerine","gray","darkGray","pale","light","white","neutralLightest","neutralCool","neutralBright","neutralLighter","neutralLight","neutralMedium","neutral","neutralThin","neutralDark","neutralFeedback","neutralDarker","black","orange","colors","color","correct","background","incorrect","hover","label","colorHover","colorSelected","popover","arrowOuterColor","borderColor","card","header","button","backgroundHover","backgroundActive","freeResponse","breakpoints","css","_templateObject","_taggedTemplateLiteralLoose","apply","call","arguments","_templateObject2","BREAKPOINTS","mixins","_templateObject5","answerColor","values","answerChecked","answerCorrect","answerIncorrect","answerHover","answerCorrectText","_templateObject8","answerCorrectAnswer","_templateObject9","resetText","_templateObject10","stepCardPadding","_templateObject11","_templateObject12","_templateObject14","styled","div","OuterStepCard","_templateObject3","_templateObject4","StepCardHeader","_templateObject7","StepCardQuestion","questionNumber","numberOfQuestions","showTotalQuestions","stepType","isHomework","availablePoints","unpadded","questionId","multipartBadge","leftHeaderChildren","rightHeaderChildren","headerTitleChildren","otherProps","InnerStepCard","StepCard","TaskStepCard","step","_ref2","_objectWithoutPropertiesLoose","_excluded2","task","available_points","uid","StyledButton","Button","isWaiting","waitingText","_excluded","CompletionStatusCard","h2","CompletionStatus","numberCompleted","handleClick","allCompleted","someCompleted","buttonText","CompletionHeader","split","toLowerCase","StyledQuestion","Question","forwardRef","ref","solution","exercise_uid","context","hidePreambles","stem_html","collaborator_solutions","_question$collaborato","formats","stimulus_html","is_deleted","exerciseUid","_question$collaborato2","displaySolution","s","hasSolution","join","QuestionHtml","hidden","displayFormats","FormatsListing","_props$html","_ref$formats","format","TextAreaErrorStyle","StyledFreeResponse","SyledQuestionStem","InfoRow","hasChildren","FreeResponseTextArea","textarea","isOverWordLimit","_templateObject6","readOnly","RevertButton","FreeResponseInput","cancelHandler","defaultValue","infoRowChildren","isSubmitDisabled","pointsChildren","saveHandler","submitBtnLabel","textHasChanged","wordLimit","questionProps","placeholder","StepCardFooter","ItemWrapper","InnerWrapper","Popover","PopoverItem","wrapperProps","PopoverItemsWrapper","FontAwesomeIcon","ExerciseIcons","exercise","topicUrl","errataUrl","isMultipleChoice","questions","every","q","includes","typeExplanation","items","as","href","target","StyledFontAwesomeIcon","icon","faBookOpen","faTriangleExclamation","faCircleInfo","height","width","AttemptsRemaining","count","published_comments","SaveButton","attempt_number","NextButton","canUpdateCurrentStep","_ref3","free_response","ExerciseQuestion","hasMultipleAttempts","attempts_remaining","detailedSolution","canAnswer","needsSaved","apiIsPending","onAnswerSave","onNextStep","answer_id_order","onAnswerChange","is_completed","FreeResponseReview","PublishedComments","StyledTaskStepCard","Preamble","Exercise","scrollToQuestion","useRef","useEffect","el","questionsRef","current","scrollToElement","legacyStepRender","showExerciseIcons","state","_state$solution","SvgComponent","viewBox","fill","xmlns","d","ProgressBarWrapper","StyledItemWrapper","span","StyledItem","handleVariant","variant","isActive","ProgressBarItem","goToStep","FlagIcon","ProgressBar","activeIndex","steps","Wrapper","Loader","BulletList","uniqueKey"],"mappings":"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"}